<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Integration Architecture Framework</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/mermaid@9.4.0/dist/mermaid.min.js"></script>
    <style>
        :root {
            --primary: #2c3e50;
            --secondary: #3498db;
            --accent: #e74c3c;
            --light: #ecf0f1;
            --dark: #34495e;
            --success: #27ae60;
            --warning: #f39c12;
            --quarkus: #4695eb;
            --camel: #ff7e47;
            --kafka: #000000;
            --postgres: #336791;
            --kubernetes: #326ce5;
        }
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            background: linear-gradient(135deg, #f5f7fa 0%, #e4e8f0 100%);
            min-height: 100vh;
        }
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 20px;
        }
        header {
            background: linear-gradient(135deg, var(--primary) 0%, var(--dark) 100%);
            color: white;
            padding: 2rem 0;
            text-align: center;
            margin-bottom: 2rem;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }
        header h1 {
            font-size: 2.5rem;
            margin-bottom: 0.5rem;
        }
        header p {
            font-size: 1.2rem;
            opacity: 0.9;
        }
        nav {
            background-color: var(--dark);
            position: sticky;
            top: 0;
            z-index: 100;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        nav ul {
            display: flex;
            justify-content: center;
            list-style: none;
            padding: 0.8rem 0;
            flex-wrap: wrap;
        }
        nav li {
            margin: 0 1rem;
        }
        nav a {
            color: white;
            text-decoration: none;
            font-weight: 500;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            transition: all 0.3s;
            display: flex;
            align-items: center;
        }
        nav a i {
            margin-right: 0.5rem;
        }
        nav a:hover {
            background-color: rgba(255, 255, 255, 0.1);
            transform: translateY(-2px);
        }
        .tab-content {
            display: none;
        }
        .tab-content.active {
            display: block;
            animation: fadeIn 0.5s ease;
        }
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        section {
            padding: 2rem 0;
        }
        h2 {
            color: var(--primary);
            margin-bottom: 1.5rem;
            padding-bottom: 0.5rem;
            border-bottom: 2px solid var(--secondary);
            display: flex;
            align-items: center;
        }
        h2 i {
            margin-right: 0.8rem;
            color: var(--secondary);
        }
        h3 {
            color: var(--dark);
            margin: 1.5rem 0 1rem 0;
            display: flex;
            align-items: center;
        }
        h3 i {
            margin-right: 0.6rem;
            color: var(--secondary);
        }
        .architecture-diagram {
            background: white;
            border-radius: 12px;
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.08);
            padding: 2rem;
            margin: 2rem 0;
            overflow: hidden;
            position: relative;
        }
        .diagram-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }
        .diagram-actions {
            display: flex;
            gap: 0.5rem;
        }
        .btn {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s;
            display: flex;
            align-items: center;
        }
        .btn i {
            margin-right: 0.5rem;
        }
        .btn-primary {
            background-color: var(--secondary);
            color: white;
        }
        .btn-primary:hover {
            background-color: #2980b9;
            transform: translateY(-2px);
        }
        .btn-outline {
            background-color: transparent;
            border: 1px solid var(--secondary);
            color: var(--secondary);
        }
        .btn-outline:hover {
            background-color: var(--secondary);
            color: white;
        }
        .mermaid {
            overflow: auto;
            padding: 1rem;
            background: #f8f9fa;
            border-radius: 8px;
            border: 1px solid #e0e0e0;
            min-height: 400px;
        }
        .architecture-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1.5rem;
            margin: 1.5rem 0;
        }
        .architecture-card {
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.08);
            padding: 1.5rem;
            transition: all 0.3s;
            border-top: 4px solid var(--secondary);
            height: 100%;
        }
        .architecture-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.12);
        }
        .architecture-card h4 {
            color: var(--primary);
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
        }
        .architecture-card h4 i {
            margin-right: 0.5rem;
            color: var(--secondary);
        }
        .tech-pill {
            display: inline-block;
            padding: 0.3rem 0.8rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 500;
            margin: 0.3rem;
            color: white;
        }
        .pill-quarkus { background-color: var(--quarkus); }
        .pill-camel { background-color: var(--camel); }
        .pill-kafka { background-color: var(--kafka); color: white; }
        .pill-postgres { background-color: var(--postgres); color: white; }
        .pill-kubernetes { background-color: var(--kubernetes); color: white; }
        .legend {
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
            margin: 1rem 0;
            padding: 1rem;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
        }
        .legend-item {
            display: flex;
            align-items: center;
            margin-right: 1rem;
        }
        .legend-color {
            width: 16px;
            height: 16px;
            border-radius: 4px;
            margin-right: 0.5rem;
        }
        .component-details {
            background: white;
            border-radius: 8px;
            padding: 1.5rem;
            margin: 1.5rem 0;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.08);
        }
        .component-list {
            list-style: none;
        }
        .component-list li {
            padding: 0.8rem;
            border-bottom: 1px solid #eee;
            display: flex;
            align-items: center;
        }
        .component-list li:last-child {
            border-bottom: none;
        }
        .component-list i {
            margin-right: 0.8rem;
            color: var(--secondary);
        }
        footer {
            background-color: var(--primary);
            color: white;
            text-align: center;
            padding: 2rem 0;
            margin-top: 3rem;
        }
        @media (max-width: 768px) {
            nav ul { flex-direction: column; align-items: center; }
            nav li { margin: 0.3rem 0; }
            .diagram-header { flex-direction: column; align-items: flex-start; gap: 1rem; }
        }
    </style>
</head>
<body>
    <header>
        <div class="container">
            <h1><i class="fas fa-project-diagram"></i> Integration Architecture Framework</h1>
            <p>Interactive visualization of architectures and components</p>
        </div>
    </header>
    <nav>
        <ul>
            <li><a href="#" class="tab-link" data-tab="global"><i class="fas fa-globe"></i> Global Architecture</a></li>
            <li><a href="#" class="tab-link" data-tab="framework"><i class="fas fa-cube"></i> Framework</a></li>
            <li><a href="#" class="tab-link" data-tab="payment"><i class="fas fa-credit-card"></i> Payment Handling</a></li>
            <li><a href="#" class="tab-link" data-tab="migration"><i class="fas fa-exchange-alt"></i> Migration</a></li>
            <li><a href="#" class="tab-link" data-tab="technologies"><i class="fas fa-microchip"></i> Technologies</a></li>
            <li><a href="#" class="tab-link" data-tab="flow"><i class="fas fa-stream"></i> Data Flow</a></li>
        </ul>
    </nav>
    <div class="container">
        <!-- Global Architecture -->
<section id="global" class="tab-content active">
    <h2><i class="fas fa-globe"></i> Global Architecture for Banking Application</h2>
    <div class="architecture-diagram">
        <div class="diagram-header">
            <h3>Banking Platform Overview</h3>
            <div class="diagram-actions">
                <button class="btn btn-primary" onclick="zoomIn('globalDiagram')">
                    <i class="fas fa-search-plus"></i> Zoom
                </button>
                <button class="btn btn-outline" onclick="resetZoom('globalDiagram')">
                    <i class="fas fa-sync"></i> Reset
                </button>
            </div>
        </div>

        <!-- Legend for Banking Components with Custom Colors -->
        <div class="legend">
            <div class="legend-item">
                <div class="legend-color" style="background-color: #1E88E5;"></div>
                <span>Quarkus Banking Services</span>
            </div>
            <div class="legend-item">
                <div class="legend-color" style="background-color: #FF9800;"></div>
                <span>Camel K Payment Integrations</span>
            </div>
            <div class="legend-item">
                <div class="legend-color" style="background-color: #4CAF50;"></div>
                <span>Kafka Payment Topics</span>
            </div>
            <div class="legend-item">
                <div class="legend-color" style="background-color: #9C27B0;"></div>
                <span>PostgreSQL Banking Data</span>
            </div>
            <div class="legend-item">
                <div class="legend-color" style="background-color: #607D8B;"></div>
                <span>Kubernetes Orchestration</span>
            </div>
            <div class="legend-item">
                <div class="legend-color" style="background-color: #F44336;"></div>
                <span>External Systems</span>
            </div>
            <div class="legend-item">
                <div class="legend-color" style="background-color: #795548;"></div>
                <span>Monitoring</span>
            </div>
            <div class="legend-item">
                <div class="legend-color" style="background-color: #009688;"></div>
                <span>CI/CD Pipeline</span>
            </div>
        </div>

        <!-- Mermaid Diagram with Custom Colors and CI/CD -->
        <div class="mermaid" id="globalDiagram">
            graph TB
                %% Custom CSS for node styling
                classDef quarkus fill:#1E88E5,stroke:#1565C0,color:#FFFFFF,stroke-width:2px;
                classDef camel fill:#FF9800,stroke:#E65100,color:#FFFFFF,stroke-width:2px;
                classDef kafka fill:#4CAF50,stroke:#2E7D32,color:#FFFFFF,stroke-width:2px;
                classDef postgres fill:#9C27B0,stroke:#7B1FA2,color:#FFFFFF,stroke-width:2px;
                classDef kubernetes fill:#607D8B,stroke:#37474F,color:#FFFFFF,stroke-width:2px;
                classDef external fill:#F44336,stroke:#C62828,color:#FFFFFF,stroke-width:2px;
                classDef monitoring fill:#795548,stroke:#3E2723,color:#FFFFFF,stroke-width:2px;
                classDef cicd fill:#009688,stroke:#00796B,color:#FFFFFF,stroke-width:2px;

                %% Presentation Layer
                subgraph Presentation Layer
                    WEB[Web Banking Portal]
                    MOB[Mobile Banking App]
                    EXT[Third-Party API]
                end

                %% API Gateway
                subgraph API Gateway
                    GW[Banking API Gateway]
                end
                class GW kubernetes;

                %% Quarkus Banking Services
                subgraph Quarkus Banking Services
                    ACC[Account Service]
                    PAY[Payment Service]
                    TRF[Credit Transfer Service]
                    FRAUD[Fraud Detection Service]
                end
                class ACC,PAY,TRF,FRAUD quarkus;

                %% Integration Platform
                subgraph Integration Platform
                    subgraph Kafka Payment Topics
                        IN_TOPIC[Payment Requests Topic]
                        PROCESS_TOPIC[Payment Processing Topic]
                        OUT_TOPIC[Payment Confirmations Topic]
                        REJECT_TOPIC[Rejected Payments Topic]
                    end
                    class IN_TOPIC,PROCESS_TOPIC,OUT_TOPIC,REJECT_TOPIC kafka;

                    subgraph Camel K Payment Integrations
                        CAMEL_IN[Payment Request Routes]
                        CAMEL_PROC[Payment Processing Routes]
                        CAMEL_OUT[Payment Confirmation Routes]
                    end
                    class CAMEL_IN,CAMEL_PROC,CAMEL_OUT camel;
                end

                %% Data Storage
                subgraph Data Storage
                    PG_ACC[PostgreSQL Accounts DB]
                    PG_TXN[PostgreSQL Transactions DB]
                    PG_LOG[PostgreSQL Audit Logs]
                end
                class PG_ACC,PG_TXN,PG_LOG postgres;

                %% Monitoring
                subgraph Monitoring
                    PROM[Prometheus]
                    GRAF[Grafana]
                    JAEG[Jaeger]
                end
                class PROM,GRAF,JAEG monitoring;

                %% CI/CD Pipeline
                subgraph CI/CD Pipeline
                    GIT[Git Repository]
                    JENK[Jenkins]
                    ARGO[ArgoCD]
                    DOCKER[Docker Registry]
                end
                class GIT,JENK,ARGO,DOCKER cicd;

                %% External Systems
                subgraph External Systems
                    BANK[Central Banking System]
                    SWIFT[SWIFT Network]
                    SEPA[SEPA Network]
                end
                class BANK,SWIFT,SEPA external;

                %% Kubernetes Cluster
                subgraph Kubernetes Cluster
                    K8S[Kubernetes]
                end
                class K8S kubernetes;

                %% Connections
                WEB --> GW
                MOB --> GW
                EXT --> GW
                GW --> IN_TOPIC
                IN_TOPIC --> CAMEL_IN
                CAMEL_IN --> PROCESS_TOPIC
                PROCESS_TOPIC --> CAMEL_PROC
                CAMEL_PROC --> ACC
                CAMEL_PROC --> PAY
                CAMEL_PROC --> TRF
                CAMEL_PROC --> FRAUD
                ACC --> OUT_TOPIC
                PAY --> OUT_TOPIC
                TRF --> OUT_TOPIC
                FRAUD --> REJECT_TOPIC
                OUT_TOPIC --> CAMEL_OUT
                REJECT_TOPIC --> CAMEL_OUT
                CAMEL_OUT --> BANK
                CAMEL_OUT --> SWIFT
                CAMEL_OUT --> SEPA
                CAMEL_IN -.-> PG_LOG
                CAMEL_PROC -.-> PG_LOG
                CAMEL_OUT -.-> PG_LOG
                ACC -.-> PG_ACC
                PAY -.-> PG_TXN
                TRF -.-> PG_TXN
                PROM -.-> ACC
                PROM -.-> PAY
                PROM -.-> TRF
                PROM -.-> FRAUD
                PROM -.-> CAMEL_IN
                PROM -.-> CAMEL_PROC
                PROM -.-> CAMEL_OUT
                GRAF -.-> PROM
                JAEG -.-> ACC
                JAEG -.-> PAY
                JAEG -.-> TRF
                JAEG -.-> FRAUD

                %% CI/CD Connections
                GIT --> JENK
                JENK --> DOCKER
                JENK -->|Deploys| K8S
                DOCKER --> ARGO
                ARGO -->|Syncs| K8S
        </div>
    </div>

    <!-- Banking-Specific Architecture Cards -->
    <div class="architecture-grid">
        <div class="architecture-card">
            <h4><i class="fas fa-layer-group"></i> Banking Architecture Layers</h4>
            <p>
                The architecture is organized into layers to ensure separation of concerns, security, and maintainability.
                <br><br>
                <strong>Key Layers:</strong>
                <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                    <li><strong>Presentation Layer:</strong> Web and mobile banking interfaces.</li>
                    <li><strong>API Gateway:</strong> Secure entry point for all banking APIs.</li>
                    <li><strong>Quarkus Banking Services:</strong> Core services for accounts, payments, credit transfers, and fraud detection.</li>
                    <li><strong>Integration Platform:</strong> Kafka and Camel K for event-driven payment processing.</li>
                    <li><strong>Data Storage:</strong> PostgreSQL for accounts, transactions, and audit logs.</li>
                    <li><strong>Monitoring:</strong> Prometheus, Grafana, and Jaeger for observability.</li>
                    <li><strong>CI/CD Pipeline:</strong> Jenkins, ArgoCD, and Docker for automated deployments.</li>
                </ul>
            </p>
            <div class="tech-pill pill-kubernetes">Kubernetes</div>
            <div class="tech-pill pill-quarkus">Quarkus</div>
            <div class="tech-pill pill-camel">Camel K</div>
        </div>

        <div class="architecture-card">
            <h4><i class="fas fa-exchange-alt"></i> Payment Communication</h4>
            <p>
                Kafka serves as the event bus for real-time communication between banking services and external systems.
                <br><br>
                <strong>Key Topics:</strong>
                <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                    <li><strong>Payment Requests:</strong> Incoming payment and credit transfer requests.</li>
                    <li><strong>Payment Processing:</strong> Intermediate processing steps (e.g., validation, fraud checks).</li>
                    <li><strong>Payment Confirmations:</strong> Successful payment confirmations.</li>
                    <li><strong>Rejected Payments:</strong> Failed or rejected payments with reasons.</li>
                </ul>
            </p>
            <div class="tech-pill pill-kafka">Kafka</div>
            <div class="tech-pill pill-postgres">PostgreSQL</div>
        </div>

        <div class="architecture-card">
            <h4><i class="fas fa-chart-line"></i> Banking Monitoring</h4>
            <p>
                Comprehensive monitoring for banking services, ensuring compliance, security, and performance.
                <br><br>
                <strong>Key Tools:</strong>
                <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                    <li><strong>Prometheus:</strong> Metrics collection for services and integrations.</li>
                    <li><strong>Grafana:</strong> Dashboards for real-time monitoring and alerts.</li>
                    <li><strong>Jaeger:</strong> Distributed tracing for payment flows.</li>
                </ul>
            </p>
            <div class="tech-pill pill-kubernetes">Prometheus</div>
            <div class="tech-pill pill-kubernetes">Grafana</div>
        </div>

        <div class="architecture-card">
            <h4><i class="fas fa-shield-alt"></i> Fraud Detection</h4>
            <p>
                Dedicated service for detecting and preventing fraudulent transactions.
                <br><br>
                <strong>Key Features:</strong>
                <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                    <li>Real-time analysis of payment requests.</li>
                    <li>Integration with external fraud detection APIs.</li>
                    <li>Automatic rejection of suspicious transactions.</li>
                    <li>Logging and reporting for compliance.</li>
                </ul>
            </p>
            <div class="tech-pill pill-quarkus">Quarkus</div>
            <div class="tech-pill pill-postgres">PostgreSQL</div>
        </div>

        <div class="architecture-card">
            <h4><i class="fas fa-globe"></i> External Integrations</h4>
            <p>
                Connects to external banking networks and systems for global transactions.
                <br><br>
                <strong>Key Integrations:</strong>
                <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                    <li><strong>Central Banking System:</strong> Domestic transactions.</li>
                    <li><strong>SWIFT Network:</strong> International wire transfers.</li>
                    <li><strong>SEPA Network:</strong> Eurozone credit transfers.</li>
                </ul>
            </p>
            <div class="tech-pill pill-camel">Camel K</div>
            <div class="tech-pill pill-kafka">Kafka</div>
        </div>

        <div class="architecture-card">
            <h4><i class="fas fa-code-branch"></i> CI/CD Pipeline</h4>
            <p>
                Automated pipeline for building, testing, and deploying banking services and integrations.
                <br><br>
                <strong>Key Components:</strong>
                <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                    <li><strong>Git Repository:</strong> Source code and infrastructure-as-code.</li>
                    <li><strong>Jenkins:</strong> CI server for building, testing, and packaging.</li>
                    <li><strong>Docker Registry:</strong> Stores container images for Quarkus and Camel K.</li>
                    <li><strong>ArgoCD:</strong> GitOps-based CD for Kubernetes deployments.</li>
                </ul>
                <strong>Key Features:</strong>
                <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                    <li>Automated builds and tests for Quarkus and Camel K.</li>
                    <li>Containerization with Docker for consistency.</li>
                    <li>GitOps-based deployments with ArgoCD for Kubernetes.</li>
                    <li>Rollback capabilities for failed deployments.</li>
                    <li>Security scanning for vulnerabilities.</li>
                </ul>
            </p>
            <div class="tech-pill" style="background-color: #009688; color: white;">Jenkins</div>
            <div class="tech-pill" style="background-color: #009688; color: white;">ArgoCD</div>
            <div class="tech-pill" style="background-color: #009688; color: white;">Docker</div>
        </div>
    </div>

    <!-- Why Quarkus and Camel K? -->
    <div class="component-details">
        <h3><i class="fas fa-question-circle"></i> Why Quarkus and Camel K?</h3>
        <p>
            The architecture leverages both <strong>Quarkus</strong> and <strong>Camel K</strong> to create a robust, scalable, and maintainable banking platform.
            Each framework serves a distinct role, ensuring separation of concerns and optimal performance.
        </p>

        <div class="architecture-grid">
            <!-- Quarkus Card -->
            <div class="architecture-card">
                <h4><i class="fas fa-bolt"></i> Quarkus: Business Logic Layer</h4>
                <p>
                    <strong>What is Quarkus?</strong>
                    Quarkus is a Kubernetes-native Java framework optimized for fast startup, low memory usage, and cloud-native deployment.
                    It is ideal for building lightweight, high-performance microservices.
                </p>
                <p>
                    <strong>Why Quarkus in Banking Applications?</strong>
                    <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                        <li><strong>Fast Startup and Low Memory:</strong> Starts in milliseconds and consumes minimal resources, making it perfect for scaling banking services in Kubernetes.</li>
                        <li><strong>Cloud-Native:</strong> Built for Kubernetes and integrates seamlessly with OpenShift, simplifying deployment and management.</li>
                        <li><strong>Developer Productivity:</strong> Supports live coding, unified configuration, and extensions for databases, messaging, and security.</li>
                        <li><strong>Standards-Based:</strong> Compatible with Jakarta EE, MicroProfile, and Spring APIs, ensuring enterprise-grade reliability.</li>
                        <li><strong>Observability:</strong> Built-in support for Prometheus metrics, OpenTelemetry tracing, and health checks.</li>
                    </ul>
                </p>
                <p>
                    <strong>Use Cases in Banking:</strong>
                    <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                        <li>Account Service: Manages customer accounts and balances.</li>
                        <li>Payment Service: Handles payment initiation, validation, and processing.</li>
                        <li>Fraud Detection Service: Analyzes transactions for suspicious activity.</li>
                        <li>Credit Transfer Service: Processes domestic and international credit transfers.</li>
                    </ul>
                </p>
                <div class="tech-pill pill-quarkus">Quarkus</div>
                <div class="tech-pill pill-kubernetes">Kubernetes</div>
            </div>

            <!-- Camel K Card -->
            <div class="architecture-card">
                <h4><i class="fas fa-exchange-alt"></i> Camel K: Integration Layer</h4>
                <p>
                    <strong>What is Camel K?</strong>
                    Camel K is a lightweight integration framework built on Apache Camel, optimized for Kubernetes.
                    It allows you to define integration routes (e.g., data transformations, API calls, event-driven workflows) and deploy them directly to Kubernetes.
                </p>
                <p>
                    <strong>Why Camel K in Banking Applications?</strong>
                    <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                        <li><strong>Event-Driven Integrations:</strong> Connects disparate systems (e.g., Kafka, REST APIs, databases, legacy systems) using event-driven patterns.</li>
                        <li><strong>Reusable and Lightweight:</strong> Integrations (Kamelets) are small, focused, and reusable, making them perfect for microservices architectures.</li>
                        <li><strong>Kubernetes-Native:</strong> Runs as first-class Kubernetes resources, scaling and managing alongside Quarkus services.</li>
                        <li><strong>300+ Connectors:</strong> Provides out-of-the-box connectors for Kafka, HTTP, SQL, SWIFT, ISO 20022, COBOL, and more.</li>
                        <li><strong>Error Handling:</strong> Built-in support for retry policies, dead-letter queues, and circuit breakers.</li>
                    </ul>
                </p>
                <p>
                    <strong>Use Cases in Banking:</strong>
                    <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                        <li>Payment Routing: Routes payment requests to the appropriate service (e.g., SEPA, SWIFT).</li>
                        <li>Format Transformation: Converts between payment formats (e.g., PAIN.001, ISO 20022, SWIFT MT103).</li>
                        <li>Legacy System Integration: Connects to COBOL, IBM MQ, or other legacy banking systems.</li>
                        <li>Event-Driven Workflows: Orchestrates multi-step processes (e.g., fraud check → payment processing → confirmation).</li>
                    </ul>
                </p>
                <div class="tech-pill pill-camel">Camel K</div>
                <div class="tech-pill pill-kafka">Kafka</div>
            </div>
        </div>

        <!-- CI/CD Section -->
        <div class="architecture-card" style="grid-column: 1 / -1; margin-top: 20px;">
            <h4><i class="fas fa-code-branch"></i> CI/CD Pipeline</h4>
            <p>
                The CI/CD pipeline automates the build, test, and deployment of Quarkus and Camel K components, ensuring rapid and reliable delivery of banking services.
            </p>
            <p>
                <strong>Key Components:</strong>
                <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                    <li><strong>Git Repository:</strong> Hosts source code and infrastructure-as-code (e.g., Helm charts, Kubernetes manifests).</li>
                    <li><strong>Jenkins:</strong> CI server for building, testing, and packaging applications into Docker containers.</li>
                    <li><strong>Docker Registry:</strong> Stores container images for Quarkus services and Camel K integrations.</li>
                    <li><strong>ArgoCD:</strong> GitOps-based continuous deployment tool for Kubernetes, ensuring declarative and auditable deployments.</li>
                </ul>
            </p>
            <p>
                <strong>Key Features:</strong>
                <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                    <li><strong>Automated Testing:</strong> Unit, integration, and security tests are run automatically on code changes.</li>
                    <li><strong>Containerization:</strong> Quarkus and Camel K components are containerized for consistency across environments.</li>
                    <li><strong>GitOps Deployments:</strong> ArgoCD syncs Kubernetes manifests from Git, enabling rollbacks and auditing.</li>
                    <li><strong>Security Scanning:</strong> Containers are scanned for vulnerabilities before deployment.</li>
                    <li><strong>Rollback Capabilities:</strong> Failed deployments can be rolled back automatically.</li>
                </ul>
            </p>
            <p>
                <strong>Example CI/CD Flow:</strong>
                <ol style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                    <li>Developer pushes code to the Git repository.</li>
                    <li>Jenkins builds the code, runs tests, and packages it into a Docker container.</li>
                    <li>Docker container is pushed to the Docker Registry.</li>
                    <li>ArgoCD detects the new container image and deploys it to Kubernetes.</li>
                    <li>Monitoring tools (Prometheus, Grafana) verify the deployment's health.</li>
                </ol>
            </p>
            <div class="tech-pill" style="background-color: #009688; color: white;">Jenkins</div>
            <div class="tech-pill" style="background-color: #009688; color: white;">ArgoCD</div>
            <div class="tech-pill" style="background-color: #009688; color: white;">Docker</div>
            <div class="tech-pill" style="background-color: #009688; color: white;">Git</div>
        </div>

        <!-- How They Work Together -->
        <div class="architecture-card" style="grid-column: 1 / -1; margin-top: 20px;">
            <h4><i class="fas fa-cogs"></i> How Quarkus, Camel K, and CI/CD Work Together</h4>
            <p>
                Quarkus, Camel K, and the CI/CD pipeline form a cohesive architecture for modern banking applications:
            </p>
            <ul style="margin-top: 10px; padding-left: 20px;">
                <li>
                    <strong>Quarkus handles business logic:</strong>
                    Services like Account, Payment, and Fraud Detection are built with Quarkus.
                    Example: The <strong>Payment Service</strong> validates a credit transfer request and updates the customer’s account balance.
                </li>
                <li>
                    <strong>Camel K handles integrations:</strong>
                    Routes and transforms data between systems.
                    Example: A <strong>Camel K route</strong> consumes a credit transfer request from Kafka, transforms it into ISO 20022 format, and routes it to the SWIFT Network.
                </li>
                <li>
                    <strong>CI/CD automates deployment:</strong>
                    Jenkins builds and tests Quarkus and Camel K components, while ArgoCD deploys them to Kubernetes.
                    Example: A code change in the <strong>Payment Service</strong> triggers a Jenkins build, which deploys the updated service to Kubernetes via ArgoCD.
                </li>
                <li>
                    <strong>End-to-End Flow with CI/CD:</strong>
                    <pre style="background: #f4f4f4; padding: 10px; border-radius: 5px; font-size: 0.9rem; overflow-x: auto;">
Developer → Git → Jenkins → Docker → ArgoCD → Kubernetes →
Quarkus (Payment Service) → Camel K (SWIFT Route) → SWIFT Network →
Camel K (Response Route) → Quarkus (Fraud Detection) → PostgreSQL (Audit Log)</pre>
                </li>
                <li>
                    <strong>Separation of Concerns:</strong>
                    Quarkus focuses on business logic, Camel K handles integration and routing, and CI/CD ensures rapid, reliable deployments.
                    This keeps the architecture clean, maintainable, and scalable.
                </li>
                <li>
                    <strong>Resilience and Compliance:</strong>
                    CI/CD ensures that all changes are tested, scanned for vulnerabilities, and deployed in a controlled manner, meeting banking compliance requirements.
                </li>
            </ul>

            <!-- Benefits Table -->
            <div style="margin-top: 20px; overflow-x: auto;">
                <table style="width: 100%; border-collapse: collapse; font-size: 0.9rem;">
                    <thead>
                        <tr style="background-color: var(--primary); color: white;">
                            <th style="padding: 10px; text-align: left;">Component</th>
                            <th style="padding: 10px; text-align: left;">Role</th>
                            <th style="padding: 10px; text-align: left;">Key Features</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td style="padding: 10px; border-bottom: 1px solid #eee;">Quarkus</td>
                            <td style="padding: 10px; border-bottom: 1px solid #eee;">Business logic (APIs, services)</td>
                            <td style="padding: 10px; border-bottom: 1px solid #eee;">Fast startup, low memory, cloud-native, observability</td>
                        </tr>
                        <tr>
                            <td style="padding: 10px; border-bottom: 1px solid #eee;">Camel K</td>
                            <td style="padding: 10px; border-bottom: 1px solid #eee;">Integration (routes, connectors)</td>
                            <td style="padding: 10px; border-bottom: 1px solid #eee;">Event-driven, 300+ connectors, Kubernetes-native, error handling</td>
                        </tr>
                        <tr>
                            <td style="padding: 10px; border-bottom: 1px solid #eee;">CI/CD Pipeline</td>
                            <td style="padding: 10px; border-bottom: 1px solid #eee;">Automated build, test, and deployment</td>
                            <td style="padding: 10px; border-bottom: 1px solid #eee;">Jenkins, ArgoCD, Docker, GitOps, security scanning, rollback</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Alternatives Considered -->
        <div class="architecture-card" style="grid-column: 1 / -1; margin-top: 20px;">
            <h4><i class="fas fa-balance-scale"></i> Alternatives Considered</h4>
            <p>
                While Quarkus, Camel K, and the CI/CD pipeline are the chosen stack, other technologies were evaluated:
            </p>
            <div style="margin-top: 15px; overflow-x: auto;">
                <table style="width: 100%; border-collapse: collapse; font-size: 0.9rem;">
                    <thead>
                        <tr style="background-color: var(--primary); color: white;">
                            <th style="padding: 10px; text-align: left;">Alternative</th>
                            <th style="padding: 10px; text-align: left;">Pros</th>
                            <th style="padding: 10px; text-align: left;">Cons</th>
                            <th style="padding: 10px; text-align: left;">Why Not Chosen</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td style="padding: 10px; border-bottom: 1px solid #eee;">Spring Boot</td>
                            <td style="padding: 10px; border-bottom: 1px solid #eee;">Mature, large ecosystem</td>
                            <td style="padding: 10px; border-bottom: 1px solid #eee;">Slower startup, higher memory usage</td>
                            <td style="padding: 10px; border-bottom: 1px solid #eee;">Quarkus is more cloud-native and lightweight</td>
                        </tr>
                        <tr>
                            <td style="padding: 10px; border-bottom: 1px solid #eee;">Node.js</td>
                            <td style="padding: 10px; border-bottom: 1px solid #eee;">Fast, lightweight</td>
                            <td style="padding: 10px; border-bottom: 1px solid #eee;">Less enterprise support for banking standards</td>
                            <td style="padding: 10px; border-bottom: 1px solid #eee;">Java/Quarkus aligns better with banking standards and enterprise needs</td>
                        </tr>
                        <tr>
                            <td style="padding: 10px; border-bottom: 1px solid #eee;">MuleSoft</td>
                            <td style="padding: 10px; border-bottom: 1px solid #eee;">Enterprise-grade integrations</td>
                            <td style="padding: 10px; border-bottom: 1px solid #eee;">Heavy, expensive</td>
                            <td style="padding: 10px; border-bottom: 1px solid #eee;">Camel K is lighter, open-source, and Kubernetes-native</td>
                        </tr>
                        <tr>
                            <td style="padding: 10px; border-bottom: 1px solid #eee;">Kafka Streams</td>
                            <td style="padding: 10px; border-bottom: 1px solid #eee;">Great for event processing</td>
                            <td style="padding: 10px; border-bottom: 1px solid #eee;">Limited connectors compared to Camel K</td>
                            <td style="padding: 10px; border-bottom: 1px solid #eee;">Camel K offers more integration options and connectors</td>
                        </tr>
                        <tr>
                            <td style="padding: 10px; border-bottom: 1px solid #eee;">GitLab CI</td>
                            <td style="padding: 10px; border-bottom: 1px solid #eee;">Integrated CI/CD with GitLab</td>
                            <td style="padding: 10px; border-bottom: 1px solid #eee;">Less flexible for complex Kubernetes deployments</td>
                            <td style="padding: 10px; border-bottom: 1px solid #eee;">Jenkins + ArgoCD provides more flexibility and GitOps capabilities</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</section>

<!-- Framework Architecture -->
<section id="framework" class="tab-content">
    <h2><i class="fas fa-cube"></i> Framework Architecture</h2>
    <div class="architecture-diagram">
        <div class="diagram-header">
            <h3>Integration Framework with Kafka and Reusable Camel Kamelets</h3>
            <div class="diagram-actions">
                <button class="btn btn-primary" onclick="zoomIn('frameworkDiagram')">
                    <i class="fas fa-search-plus"></i> Zoom
                </button>
                <button class="btn btn-outline" onclick="resetZoom('frameworkDiagram')">
                    <i class="fas fa-sync"></i> Reset
                </button>
            </div>
        </div>
        <div class="mermaid" id="frameworkDiagram">
            %%{init: {'theme': 'default', 'flowchart': {'useMaxWidth': true, 'htmlLabels': true, 'curve': 'basis'}}}%%
            graph TB
                %% Custom CSS for node styling
                classDef quarkus fill:#1E88E5,stroke:#1565C0,color:#FFFFFF,stroke-width:2px;
                classDef camel fill:#FF9800,stroke:#E65100,color:#FFFFFF,stroke-width:2px;
                classDef kafka fill:#4CAF50,stroke:#2E7D32,color:#FFFFFF,stroke-width:2px;
                classDef postgres fill:#9C27B0,stroke:#7B1FA2,color:#FFFFFF,stroke-width:2px;
                classDef kubernetes fill:#607D8B,stroke:#37474F,color:#FFFFFF,stroke-width:2px;
                classDef external fill:#F44336,stroke:#C62828,color:#FFFFFF,stroke-width:2px;
                classDef monitoring fill:#795548,stroke:#3E2723,color:#FFFFFF,stroke-width:2px;
                classDef cicd fill:#009688,stroke:#00796B,color:#FFFFFF,stroke-width:2px;

                %% Input Connectors Kamelets
                subgraph Input Connectors Kamelets
                    HTTP_IN[HTTP/HTTPS Connector Kamelet<br><small>Flow Control<br>Throttling/Shaping<br>Input Retention</small>]
                    KAFKA_IN[Kafka Connector Kamelet<br><small>Flow Control<br>Throttling/Shaping<br>Input Retention</small>]
                    MQ_IN[MQ Series Connector Kamelet<br><small>Flow Control<br>Throttling/Shaping<br>Input Retention</small>]
                    FILE_IN[CFT Axway File Input Connector Kamelet<br><small>Flow Control<br>Throttling/Shaping<br>Input Retention</small>]
                end
                class HTTP_IN,KAFKA_IN,MQ_IN,FILE_IN camel;

                %% Kafka Broker
                subgraph Kafka Broker
                    style KAFKA_BROKER fill:#4CAF50,stroke:#2E7D32,stroke-width:2px,color:white
                    KAFKA_BROKER[Kafka Broker]
                end
                class KAFKA_BROKER kafka;

                %% Payment-Specific Kamelets
                subgraph "Payment-Specific Kamelets"
                    style PACS fill:#FF9800,stroke:#E65100,stroke-width:2px,color:white
                    style PAIN fill:#FF9800,stroke:#E65100,stroke-width:2px,color:white
                    style ISO fill:#FF9800,stroke:#E65100,stroke-width:2px,color:white
                    style SWIFT fill:#FF9800,stroke:#E65100,stroke-width:2px,color:white
                    style COBOL fill:#FF9800,stroke:#E65100,stroke-width:2px,color:white
                    style ROUTER fill:#FF9800,stroke:#E65100,stroke-width:2px,color:white
                    PACS[PACS Format Kamelet]
                    PAIN[PAIN Format Kamelet]
                    ISO[XML ISO 20022 Kamelet]
                    SWIFT[SWIFT MT/ISO Kamelet]
                    COBOL[COBOL Copybook Kamelet]
                    ROUTER[Generic Payment Type Router Kamelet]
                end
                class PACS,PAIN,ISO,SWIFT,COBOL,ROUTER camel;

                %% Reusable Camel K Components
                subgraph "Reusable Camel K Components"
                    style ROUTE fill:#FF9800,stroke:#E65100,stroke-width:2px,color:white
                    style TRANS fill:#FF9800,stroke:#E65100,stroke-width:2px,color:white
                    style VALID fill:#FF9800,stroke:#E65100,stroke-width:2px,color:white
                    style LOG fill:#FF9800,stroke:#E65100,stroke-width:2px,color:white
                    style RETRY fill:#FF9800,stroke:#E65100,stroke-width:2px,color:white
                    ROUTE[Dynamic Router Kamelet]
                    TRANS[Data Transformer]
                    VALID[Validator]
                    LOG[Structured Logger Kamelet]
                    RETRY[Retry Handler Kamelet]
                end
                class ROUTE,TRANS,VALID,LOG,RETRY camel;

                %% Output Connectors Kamelets
                subgraph Output Connectors Kamelets
                    HTTP_OUT[HTTP/HTTPS Connector Kamelet<br><small>Output Retention<br>Throttling</small>]
                    KAFKA_OUT[Kafka Connector Kamelet<br><small>Output Retention<br>Throttling</small>]
                    DB_OUT[DB Connector Kamelet<br><small>Output Retention<br>Throttling</small>]
                    CFT_OUT[CFT Axway Output Connector Kamelet<br><small>Output Retention<br>Throttling</small>]
                    LEGACY_OUT[Other Legacy Connector Kamelet<br><small>Output Retention<br>Throttling</small>]
                end
                class HTTP_OUT,KAFKA_OUT,DB_OUT,CFT_OUT,LEGACY_OUT camel;

                %% PostgreSQL
                subgraph Data Storage
                    PG[PostgreSQL]
                end
                class PG postgres;

                %% Connections
                HTTP_IN -->|Publish| KAFKA_BROKER
                KAFKA_IN -->|Publish| KAFKA_BROKER
                MQ_IN -->|Publish| KAFKA_BROKER
                FILE_IN -->|Publish| KAFKA_BROKER
                KAFKA_BROKER -->|Consume| ROUTER
                ROUTER -->|PACS| PACS
                ROUTER -->|PAIN| PAIN
                ROUTER -->|ISO| ISO
                ROUTER -->|SWIFT| SWIFT
                ROUTER -->|COBOL| COBOL
                PACS -->|Transform| TRANS
                PAIN -->|Transform| TRANS
                ISO -->|Transform| TRANS
                SWIFT -->|Transform| TRANS
                COBOL -->|Transform| TRANS
                TRANS -->|Validate| VALID
                VALID -->|Log| LOG
                LOG -->|Route| ROUTE
                ROUTE -->|Publish| KAFKA_BROKER
                KAFKA_BROKER -->|Consume| HTTP_OUT
                KAFKA_BROKER -->|Consume| KAFKA_OUT
                KAFKA_BROKER -->|Consume| DB_OUT
                KAFKA_BROKER -->|Consume| CFT_OUT
                KAFKA_BROKER -->|Consume| LEGACY_OUT
                RETRY -->|On Error| ROUTE
                LOG -->|Store| PG
        </div>
    </div>

    <div class="component-details">
        <h3><i class="fas fa-list"></i> Component Details</h3>
        <h4><i class="fas fa-sign-in-alt"></i> Input Connectors</h4>
        <ul class="component-list">
            <li><i class="fas fa-exchange-alt"></i> <strong>(HTTP/HTTPS) Connector Kamelet</strong> - REST/HTTP endpoints for receiving data</li>
            <li><i class="fas fa-stream"></i> <strong>Kafka Connector Kamelet</strong> - Consumes from Kafka topics</li>
            <li><i class="fas fa-envelope"></i> <strong>MQ Series Connector Kamelet</strong> - Integration with IBM MQ Series</li>
            <li><i class="fas fa-file"></i> <strong>CFT AXWAY Input Connector Kamelet</strong> - CFT Input File processing</li>
        </ul>

        <h4><i class="fas fa-cogs"></i> Reusable Camel K Components</h4>
        <div class="architecture-grid">
            <div class="architecture-card">
                <h4><i class="fas fa-route"></i> Dynamic Router Kamelet</h4>
                <p>Reusable routing component that directs messages based on content, headers, or business rules. Can be configured for multiple integration scenarios.</p>
                <div class="tech-pill pill-camel">Camel K</div>
            </div>
            <div class="architecture-card">
                <h4><i class="fas fa-exchange-alt"></i> Data Transformer Kamelet</h4>
                <p>Generic transformation component that converts between different data formats (JSON, XML, CSV, etc.). Uses reusable XSLT or simple mapping configurations.</p>
                <div class="tech-pill pill-camel">Camel K</div>
            </div>
            <div class="architecture-card">
                <h4><i class="fas fa-check-circle"></i> Validator</h4>
                <p>Reusable validation component that checks message structure and content against defined schemas. Supports JSON Schema, XSD, and custom validation rules.</p>
                <div class="tech-pill pill-camel">Camel K</div>
            </div>
            <div class="architecture-card">
                <h4><i class="fas fa-clipboard-list"></i> Structured Logger Kamelet</h4>
                <p>Centralized logging component that records all integration events with correlation IDs for end-to-end tracing. Logs to PostgreSQL for persistence.</p>
                <div class="tech-pill pill-camel">Camel K</div>
                <div class="tech-pill pill-postgres">PostgreSQL</div>
            </div>
            <div class="architecture-card">
                <h4><i class="fas fa-redo"></i> Retry Handler Kamelet</h4>
                <p>Generic error handling and retry component with configurable policies (exponential backoff, max retries, etc.). Integrates with dead letter queues.</p>
                <div class="tech-pill pill-camel">Camel K</div>
            </div>
        </div>

        <h4><i class="fas fa-sign-out-alt"></i> Output Connectors</h4>
        <ul class="component-list">
            <li><i class="fas fa-exchange-alt"></i> <strong>HTTP / HTTPS Connector Kamelet</strong> - Sends to external services</li>
            <li><i class="fas fa-stream"></i> <strong>Kafka Connector Kamelet</strong> - Produces to Kafka topics</li>
            <li><i class="fas fa-database"></i> <strong>DB Connector Kamelet</strong> - Writes to databases</li>
            <li><i class="fas fa-database"></i> <strong>CFT Axway Output Connector Kamelet</strong> - CFT output File processing</li>
            <li><i class="fas fa-server"></i> <strong>Other Legacy Connector Kamelet</strong> - Integration with legacy systems</li>
        </ul>

        <div class="architecture-card" style="margin-top: 20px; grid-column: 1 / -1;">
            <h4><i class="fas fa-recycle"></i> Reusability Benefits</h4>
            <p>All Kamelets and Camel K components are designed as <strong>independent, configurable building blocks</strong> that can be:</p>
            <ul style="margin-top: 10px; padding-left: 20px;">
                <li>Reused across multiple integration flows</li>
                <li>Configured via external properties (no code changes)</li>
                <li>Deployed independently in Kubernetes</li>
                <li>Versioned and shared across projects</li>
                <li>Extended with custom logic when needed</li>
            </ul>
            <p style="margin-top: 15px;"><strong>Example:</strong> The same "Data Transformer" component can handle JSON→XML conversion in one flow and CSV→JSON in another, just by changing its configuration.</p>
        </div>

        <!-- Feature Definitions -->
        <div class="component-details">
            <h3><i class="fas fa-cogs"></i> Feature Definitions</h3>
            <div class="architecture-grid">
                <div class="architecture-card">
                    <h4><i class="fas fa-tachometer-alt" style="color:#e74c3c;"></i> Flow Control</h4>
                    <p>Manages the rate of incoming messages to prevent overwhelming the system.</p>
                    <div class="tech-pill" style="background-color: #f9f;">Input Connectors</div>
                </div>
                <div class="architecture-card">
                    <h4><i class="fas fa-sliders-h" style="color:#3498db;"></i> Throttling/Shaping</h4>
                    <p>Controls the rate at which messages are processed or sent to prevent system overload.</p>
                    <div class="tech-pill" style="background-color: #f9f;">Input Connectors</div>
                    <div class="tech-pill" style="background-color: #a569bd;">Output Connectors</div>
                </div>
                <div class="architecture-card">
                    <h4><i class="fas fa-database" style="color:#2ecc71;"></i> Input Retention</h4>
                    <p>Temporarily stores incoming messages to handle spikes in traffic or system downtime.</p>
                    <div class="tech-pill" style="background-color: #f9f;">Input Connectors</div>
                </div>
                <div class="architecture-card">
                    <h4><i class="fas fa-database" style="color:#2ecc71;"></i> Output Retention</h4>
                    <p>Temporarily stores outgoing messages to guarantee delivery to external systems.</p>
                    <div class="tech-pill" style="background-color: #a569bd;">Output Connectors</div>
                </div>
            </div>
        </div>
		<!-- Add to Framework Architecture section -->
<div class="component-details">
    <h3><i class="fas fa-robot"></i> Technical AI Features for Framework Components</h3>

    <div class="architecture-card" style="grid-column: 1 / -1;">
        <h4><i class="fas fa-cogs"></i> AI-Enhanced Framework Components</h4>

        <div class="mermaid" style="margin-top: 20px; text-align: center;">
            graph LR
                %% Framework Components with AI
                subgraph AI_Framework["AI-Enhanced Framework"]
                    Input[Input Connectors]
                    AIRouter[AI Smart Router]
                    AITransformer[AI Transformer]
                    AIValidator[AI Validator]
                    AIThrottle[AI Throttling]
                    AIRetention[AI Retention]
                    Logger[Structured Logger]
                    Output[Output Connectors]

                    %% AI Control
                    AISupervisor[AI Supervisor]
                    AIForecast[AI Forecast Engine]
                end

                %% Connections
                Input --> AIRouter
                AIRouter --> AITransformer
                AITransformer --> AIValidator
                AIValidator --> AIThrottle
                AIThrottle --> AIRetention
                AIRetention --> Logger
                Logger --> Output

                %% AI Control Connections
                AISupervisor -->|monitor| AIRouter
                AISupervisor -->|monitor| AITransformer
                AISupervisor -->|monitor| AIValidator
                AISupervisor -->|monitor| AIThrottle
                AISupervisor -->|monitor| AIRetention
                AIForecast -->|predict| AIRouter
                AIForecast -->|predict| AIThrottle
                AIForecast -->|predict| AIRetention

                %% Styling
                classDef ai fill:#9C27B0,stroke:#7B1FA2,color:white
                class AIRouter,AITransformer,AIValidator,AIThrottle,AIRetention,AISupervisor,AIForecast ai
        </div>

        <h5 style="margin-top: 20px;"><i class="fas fa-route"></i> AI Smart Router - Flow Control</h5>
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); gap: 20px; margin-top: 10px;">
            <div>
                <p><strong>Technical Features:</strong></p>
                <ul style="margin-top: 5px; padding-left: 20px; font-size: 0.9rem;">
                    <li><strong>Dynamic Routing Algorithm:</strong> Real-time path optimization using reinforcement learning</li>
                    <li><strong>Network Status Monitoring:</strong> Continuous analysis of destination system availability and performance</li>
                    <li><strong>Cost-Performance Tradeoff:</strong> Multi-objective optimization for routing decisions</li>
                    <li><strong>SLA Compliance Prediction:</strong> Estimates likelihood of meeting SLAs for each route</li>
                    <li><strong>Fallback Path Selection:</strong> Automatic alternative routing when primary path fails</li>
                    <li><strong>Adaptive Learning:</strong> Continuous model updates based on routing outcomes</li>
                </ul>
            </div>
            <div>
                <p><strong>Implementation Details:</strong></p>
                <div style="margin-top: 5px; background: #f8f9fa; padding: 10px; border-radius: 5px; font-family: monospace; font-size: 0.8rem;">
                    <pre>
public class AIRoutingDecision {
    private String selectedRoute;
    private double confidenceScore;
    private Map&lt;String, Double&gt; routeScores;
    private List&lt;RoutingConstraint&gt; constraints;
    private PerformanceMetrics predictedPerformance;

    // Decision method using trained ML model
    public AIRoutingDecision makeDecision(
            Payment payment,
            NetworkStatus networkStatus,
            HistoricalPerformance history) {

        // Feature extraction
        double[] features = extractFeatures(payment, networkStatus, history);

        // Model prediction
        double[] predictions = routingModel.predict(features);

        // Select best route based on multi-objective optimization
        this.selectedRoute = selectOptimalRoute(predictions);
        this.confidenceScore = calculateConfidence(predictions);
        this.routeScores = calculateRouteScores(predictions);
        this.constraints = analyzeConstraints(payment);
        this.predictedPerformance = predictPerformance(selectedRoute);

        return this;
    }

    // Feature extraction for ML model
    private double[] extractFeatures(Payment payment, NetworkStatus status, HistoricalPerformance history) {
        // Extract 47 features including:
        // - Payment amount, currency, type
        // - Destination network latency, success rate
        // - Historical performance metrics
        // - Current system load
        // - SLA requirements
        // - Cost metrics
        // ...
    }
}</pre>
                </div>
            </div>
        </div>

        <h5 style="margin-top: 20px;"><i class="fas fa-exchange-alt"></i> AI Transformer - Format Conversion</h5>
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); gap: 20px; margin-top: 10px;">
            <div>
                <p><strong>Technical Features:</strong></p>
                <ul style="margin-top: 5px; padding-left: 20px; font-size: 0.9rem;">
                    <li><strong>Automatic Format Detection:</strong> NLP-based identification of input payment formats</li>
                    <li><strong>Context-Aware Mapping:</strong> Semantic understanding of payment fields</li>
                    <li><strong>Schema Validation:</strong> AI-powered validation against multiple payment schemas</li>
                    <li><strong>Adaptive Transformation:</strong> Self-learning mapping rules based on correction feedback</li>
                    <li><strong>Format Variation Handling:</strong> Robust processing of non-standard format variations</li>
                    <li><strong>Transformation Quality Scoring:</strong> Confidence metrics for each transformation</li>
                </ul>
            </div>
            <div>
                <p><strong>Implementation Example:</strong></p>
                <div style="margin-top: 5px; background: #f8f9fa; padding: 10px; border-radius: 5px; font-family: monospace; font-size: 0.8rem;">
                    <pre>
public class AIFormatTransformer {
    private FormatDetectionModel detectionModel;
    private Map&lt;String, TransformationModel&gt; transformationModels;
    private QualityAssessmentModel qualityModel;

    public TransformationResult transform(String input) {
        // 1. Detect input format using NLP model
        String detectedFormat = detectionModel.detectFormat(input);
        double formatConfidence = detectionModel.getConfidence();

        // 2. Select appropriate transformation model
        TransformationModel model = transformationModels.get(detectedFormat);
        if (model == null) {
            throw new UnsupportedFormatException(detectedFormat);
        }

        // 3. Perform transformation with context awareness
        String transformed = model.transform(input);

        // 4. Assess transformation quality
        double qualityScore = qualityModel.assessQuality(
            input, transformed, detectedFormat);

        return new TransformationResult(
            transformed,
            detectedFormat,
            formatConfidence,
            qualityScore,
            model.getValidationWarnings()
        );
    }

    // Model training interface
    public void trainTransformationModel(
            String format,
            List&lt;TrainingExample&gt; examples) {
        transformationModels.get(format).train(examples);
    }
}</pre>
                </div>
            </div>
        </div>

        <h5 style="margin-top: 20px;"><i class="fas fa-check-circle"></i> AI Validator - Supervision</h5>
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); gap: 20px; margin-top: 10px;">
            <div>
                <p><strong>Technical Supervision Features:</strong></p>
                <ul style="margin-top: 5px; padding-left: 20px; font-size: 0.9rem;">
                    <li><strong>Anomaly Detection:</strong> ML-based identification of unusual payment patterns</li>
                    <li><strong>Contextual Validation:</strong> Rule application based on payment context</li>
                    <li><strong>Adaptive Thresholds:</strong> Dynamic adjustment of validation thresholds</li>
                    <li><strong>Explainable Decisions:</strong> Clear reasoning for validation results</li>
                    <li><strong>Continuous Learning:</strong> Model updates from validation outcomes</li>
                    <li><strong>Risk Scoring:</strong> Quantitative risk assessment for each payment</li>
                </ul>
            </div>
            <div>
                <p><strong>Validation Implementation:</strong></p>
                <div style="margin-top: 5px; background: #f8f9fa; padding: 10px; border-radius: 5px; font-family: monospace; font-size: 0.8rem;">
                    <pre>
public class AIValidator {
    private AnomalyDetectionModel anomalyModel;
    private ContextualRulesEngine rulesEngine;
    private RiskScoringModel riskModel;
    private ValidationHistory history;

    public ValidationResult validate(Payment payment) {
        // 1. Check for anomalies
        double anomalyScore = anomalyModel.score(payment);
        List&lt;Anomaly&gt; anomalies = anomalyModel.detectAnomalies(payment);

        // 2. Apply contextual rules
        RuleValidationResult ruleResult = rulesEngine.validate(
            payment,
            getPaymentContext(payment)
        );

        // 3. Calculate comprehensive risk score
        double riskScore = riskModel.calculateRisk(
            payment,
            anomalyScore,
            ruleResult
        );

        // 4. Make validation decision
        boolean isValid = makeDecision(riskScore, ruleResult, anomalies);

        // 5. Record for continuous learning
        history.recordValidation(payment, isValid, riskScore, anomalies);

        return new ValidationResult(
            isValid,
            riskScore,
            anomalies,
            ruleResult.getFailedRules(),
            generateExplanation(payment, riskScore, ruleResult)
        );
    }

    // Continuous learning from validation outcomes
    public void updateModels(List&lt;ValidationOutcome&gt; outcomes) {
        anomalyModel.learnFromOutcomes(outcomes);
        riskModel.retrainWithNewData(outcomes);
        rulesEngine.adjustThresholds(outcomes);
    }
}</pre>
                </div>
            </div>
        </div>

        <h5 style="margin-top: 20px;"><i class="fas fa-sliders-h"></i> AI Throttling - Flow Control</h5>
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); gap: 20px; margin-top: 10px;">
            <div>
                <p><strong>Technical Flow Control Features:</strong></p>
                <ul style="margin-top: 5px; padding-left: 20px; font-size: 0.9rem;">
                    <li><strong>Adaptive Rate Limiting:</strong> Dynamic adjustment based on system load and payment priority</li>
                    <li><strong>Priority-Based Throttling:</strong> Intelligent queuing based on payment urgency and value</li>
                    <li><strong>Predictive Backpressure:</strong> Anticipates downstream bottlenecks before they occur</li>
                    <li><strong>Burst Handling:</strong> Automatic adjustment for sudden volume spikes</li>
                    <li><strong>SLA-Aware Throttling:</strong> Ensures critical payments meet service level agreements</li>
                    <li><strong>Resource Optimization:</strong> Balances throughput with system resource usage</li>
                </ul>
            </div>
            <div>
                <p><strong>Throttling Implementation:</strong></p>
                <div style="margin-top: 5px; background: #f8f9fa; padding: 10px; border-radius: 5px; font-family: monospace; font-size: 0.8rem;">
                    <pre>
public class AIThrottleController {
    private LoadPredictionModel loadModel;
    private PriorityAnalyzer priorityAnalyzer;
    private SystemMonitor systemMonitor;
    private ThrottleHistory history;

    public ThrottleDecision calculateThrottle(
            Payment payment,
            SystemStatus status) {

        // 1. Predict system load impact
        double loadImpact = loadModel.predictImpact(payment, status);

        // 2. Analyze payment priority
        int priorityScore = priorityAnalyzer.calculatePriority(payment);

        // 3. Get current system capacity
        double availableCapacity = systemMonitor.getAvailableCapacity();

        // 4. Calculate optimal throttle settings
        ThrottleSettings settings = calculateOptimalThrottle(
            loadImpact,
            priorityScore,
            availableCapacity,
            payment.getSLARequirements()
        );

        // 5. Apply adaptive rate limiting
        return new ThrottleDecision(
            settings.getRateLimit(),
            settings.getQueuePosition(),
            settings.getExpectedDelay(),
            settings.getPriorityAdjustment()
        );
    }

    // Continuous learning from system performance
    public void updateModels(PerformanceMetrics metrics) {
        loadModel.retrainWithNewData(metrics);
        priorityAnalyzer.adjustWeights(metrics);
    }
}</pre>
                </div>
            </div>
        </div>

        <h5 style="margin-top: 20px;"><i class="fas fa-database"></i> AI Retention - Data Management</h5>
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); gap: 20px; margin-top: 10px;">
            <div>
                <p><strong>Technical Retention Features:</strong></p>
                <ul style="margin-top: 5px; padding-left: 20px; font-size: 0.9rem;">
                    <li><strong>Intelligent Caching:</strong> AI-driven cache invalidation and refresh policies</li>
                    <li><strong>Predictive Archiving:</strong> Automated archiving based on access patterns</li>
                    <li><strong>Storage Tier Optimization:</strong> Dynamic data placement across storage tiers</li>
                    <li><strong>Retention Policy Automation:</strong> AI-driven compliance with retention policies</li>
                    <li><strong>Data Lifecycle Management:</strong> Automated transition through storage tiers</li>
                    <li><strong>Capacity Forecasting:</strong> Predictive analysis of storage needs</li>
                </ul>
            </div>
            <div>
                <p><strong>Retention Implementation:</strong></p>
                <div style="margin-top: 5px; background: #f8f9fa; padding: 10px; border-radius: 5px; font-family: monospace; font-size: 0.8rem;">
                    <pre>
public class AIRetentionManager {
    private AccessPatternModel accessModel;
    private StorageOptimizer storageOptimizer;
    private ComplianceEngine complianceEngine;
    private RetentionHistory history;

    public RetentionDecision manageRetention(
            PaymentData data,
            StorageStatus status) {

        // 1. Predict future access patterns
        AccessPrediction prediction = accessModel.predictAccess(data);

        // 2. Determine optimal storage tier
        StorageTier tier = storageOptimizer.selectTier(
            prediction,
            data.getSize(),
            data.getSensitivity()
        );

        // 3. Check compliance requirements
        RetentionPolicy policy = complianceEngine.getPolicy(data.getType());
        boolean complianceRisk = complianceEngine.checkRisk(data, tier);

        // 4. Make retention decision
        return new RetentionDecision(
            tier,
            calculateRetentionPeriod(data, prediction),
            prediction.getAccessProbability(),
            complianceRisk,
            calculateCostImpact(data, tier)
        );
    }

    // Continuous learning from access patterns
    public void updateAccessModels(List&lt;AccessLog&gt; logs) {
        accessModel.retrainWithNewData(logs);
        storageOptimizer.adjustPolicies(logs);
    }
}</pre>
                </div>
            </div>
        </div>

        <h5 style="margin-top: 20px;"><i class="fas fa-chart-line"></i> AI Supervisor - Monitoring</h5>
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); gap: 20px; margin-top: 10px;">
            <div>
                <p><strong>Technical Supervision Features:</strong></p>
                <ul style="margin-top: 5px; padding-left: 20px; font-size: 0.9rem;">
                    <li><strong>Real-Time Performance Monitoring:</strong> Continuous analysis of component metrics</li>
                    <li><strong>Anomaly Detection:</strong> ML-based identification of operational anomalies</li>
                    <li><strong>Predictive Alerting:</strong> Early warning of potential issues</li>
                    <li><strong>Automatic Remediation:</strong> Self-healing actions for common issues</li>
                    <li><strong>Capacity Planning:</strong> Predictive analysis of resource needs</li>
                    <li><strong>SLA Compliance Monitoring:</strong> Continuous tracking of service level agreements</li>
                </ul>
            </div>
            <div>
                <p><strong>Supervisor Implementation:</strong></p>
                <div style="margin-top: 5px; background: #f8f9fa; padding: 10px; border-radius: 5px; font-family: monospace; font-size: 0.8rem;">
                    <pre>
public class AISupervisor {
    private PerformanceModel performanceModel;
    private AnomalyDetector anomalyDetector;
    private RemediationEngine remediationEngine;
    private AlertingSystem alerting;
    private MetricsRepository metrics;

    public void monitorComponent(Component component) {
        // 1. Collect real-time metrics
        ComponentMetrics currentMetrics = collectMetrics(component);

        // 2. Predict normal performance range
        PerformanceRange expected = performanceModel.predictRange(
            component.getType(),
            currentMetrics.getContext()
        );

        // 3. Detect anomalies
        List&lt;Anomaly&gt; anomalies = anomalyDetector.detect(
            currentMetrics,
            expected
        );

        // 4. Trigger remediation if needed
        if (!anomalies.isEmpty()) {
            RemediationAction action = remediationEngine.determineAction(
                component,
                anomalies
            );
            executeRemediation(component, action);
        }

        // 5. Check SLA compliance
        checkSLACompliance(component, currentMetrics);

        // 6. Store metrics for continuous learning
        metrics.store(component, currentMetrics, anomalies);
    }

    // Continuous model improvement
    public void updateModels() {
        List&lt;ComponentMetrics&gt; history = metrics.getRecentHistory();
        performanceModel.retrain(history);
        anomalyDetector.adjustThresholds(history);
    }
}</pre>
                </div>
            </div>
        </div>

        <h5 style="margin-top: 20px;"><i class="fas fa-chart-line"></i> AI Forecast Engine</h5>
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); gap: 20px; margin-top: 10px;">
            <div>
                <p><strong>Technical Forecasting Features:</strong></p>
                <ul style="margin-top: 5px; padding-left: 20px; font-size: 0.9rem;">
                    <li><strong>Transaction Volume Forecasting:</strong> Predicts payment volumes by type and time</li>
                    <li><strong>Resource Demand Prediction:</strong> Anticipates CPU, memory, and storage needs</li>
                    <li><strong>Performance Degradation Prediction:</strong> Early warning of potential bottlenecks</li>
                    <li><strong>Error Rate Forecasting:</strong> Predicts potential error spikes</li>
                    <li><strong>SLA Compliance Prediction:</strong> Estimates likelihood of meeting service levels</li>
                    <li><strong>Cost Optimization Forecasting:</strong> Predicts cost-saving opportunities</li>
                </ul>
            </div>
            <div>
                <p><strong>Forecast Implementation:</strong></p>
                <div style="margin-top: 5px; background: #f8f9fa; padding: 10px; border-radius: 5px; font-family: monospace; font-size: 0.8rem;">
                    <pre>
public class AIForecastEngine {
    private TimeSeriesModel volumeModel;
    private ResourceModel resourceModel;
    private PerformanceModel performanceModel;
    private ForecastHistory history;

    public ForecastResult generateForecast(
            ForecastRequest request) {

        // 1. Predict transaction volumes
        VolumeForecast volumeForecast = volumeModel.forecast(
            request.getTimeRange(),
            request.getPaymentTypes()
        );

        // 2. Predict resource demands
        ResourceForecast resourceForecast = resourceModel.predictDemand(
            volumeForecast,
            request.getInfrastructure()
        );

        // 3. Predict performance metrics
        PerformanceForecast performanceForecast = performanceModel.predict(
            volumeForecast,
            resourceForecast
        );

        // 4. Calculate confidence intervals
        ConfidenceIntervals confidence = calculateConfidence(
            volumeForecast,
            resourceForecast,
            performanceForecast
        );

        // 5. Generate recommendations
        List&lt;Recommendation&gt; recommendations = generateRecommendations(
            volumeForecast,
            resourceForecast,
            performanceForecast,
            request.getConstraints()
        );

        // 6. Store forecast for future reference
        history.storeForecast(request, volumeForecast, resourceForecast);

        return new ForecastResult(
            volumeForecast,
            resourceForecast,
            performanceForecast,
            confidence,
            recommendations
        );
    }

    // Continuous learning from actual vs predicted
    public void updateModels(ActualPerformance actuals) {
        volumeModel.adjustWeights(actuals.getVolumes());
        resourceModel.retrain(actuals.getResources());
        performanceModel.update(actuals.getPerformance());
    }
}</pre>
                </div>
            </div>
        </div>
    </div>

    <div class="architecture-card" style="grid-column: 1 / -1; margin-top: 20px;">
        <h4><i class="fas fa-lightbulb"></i> Technical Implementation Summary</h4>

        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-top: 15px;">
            <div>
                <h5><i class="fas fa-cogs"></i> Core AI Components</h5>
                <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                    <li><strong>Smart Router:</strong> Reinforcement learning for optimal routing</li>
                    <li><strong>Intelligent Transformer:</strong> NLP-based format detection and transformation</li>
                    <li><strong>AI Validator:</strong> Anomaly detection and risk scoring</li>
                    <li><strong>Adaptive Throttle:</strong> Predictive flow control</li>
                    <li><strong>Smart Retention:</strong> AI-driven data lifecycle management</li>
                    <li><strong>System Supervisor:</strong> Real-time monitoring and remediation</li>
                    <li><strong>Forecast Engine:</strong> Predictive analytics for capacity planning</li>
                </ul>
            </div>
            <div>
                <h5><i class="fas fa-code"></i> Technical Implementation</h5>
                <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                    <li><strong>Java/Kotlin:</strong> Core implementation language</li>
                    <li><strong>TensorFlow/PyTorch:</strong> ML model implementation</li>
                    <li><strong>ONNX Runtime:</strong> Model serving and inference</li>
                    <li><strong>Kafka Streams:</strong> Real-time event processing</li>
                    <li><strong>Prometheus Metrics:</strong> Model performance monitoring</li>
                    <li><strong>PostgreSQL:</strong> Model storage and history</li>
                    <li><strong>Quarkus Extensions:</strong> AI service integration</li>
                </ul>
            </div>
        </div>

        <h5 style="margin-top: 20px;"><i class="fas fa-project-diagram"></i> Integration Architecture</h5>
        <div class="mermaid" style="margin-top: 15px; text-align: center;">
            graph LR
                %% AI Services
                subgraph AI_Services["AI Microservices"]
                    RouterAI[Routing AI Service]
                    TransformAI[Transformation AI]
                    ValidateAI[Validation AI]
                    ThrottleAI[Throttling AI]
                    RetentionAI[Retention AI]
                    SupervisorAI[Supervisor AI]
                    ForecastAI[Forecast AI]
                end

                %% Framework Components
                subgraph Framework["Camel K Framework"]
                    Router[Smart Router]
                    Transformer[Intelligent Transformer]
                    Validator[AI Validator]
                    Throttle[Adaptive Throttle]
                    Retention[Smart Retention]
                    Logger[Structured Logger]
                end

                %% Connections
                RouterAI --> Router
                TransformAI --> Transformer
                ValidateAI --> Validator
                ThrottleAI --> Throttle
                RetentionAI --> Retention
                SupervisorAI --> Router
                SupervisorAI --> Transformer
                SupervisorAI --> Validator
                SupervisorAI --> Throttle
                SupervisorAI --> Retention
                ForecastAI --> Router
                ForecastAI --> Throttle
                ForecastAI --> Retention

                %% Infrastructure
                subgraph Infrastructure["Support Infrastructure"]
                    Kafka[Kafka]
                    PostgreSQL[PostgreSQL]
                    Prometheus[Prometheus]
                    ModelRegistry[Model Registry]
                end

                %% AI to Infrastructure
                RouterAI --> Kafka
                TransformAI --> Kafka
                ValidateAI --> Kafka
                ThrottleAI --> Kafka
                RetentionAI --> Kafka
                SupervisorAI --> Prometheus
                ForecastAI --> PostgreSQL
                RouterAI --> ModelRegistry
                TransformAI --> ModelRegistry
                ValidateAI --> ModelRegistry
                ThrottleAI --> ModelRegistry
                RetentionAI --> ModelRegistry
                SupervisorAI --> ModelRegistry
                ForecastAI --> ModelRegistry

                %% Styling
                classDef ai fill:#9C27B0,stroke:#7B1FA2,color:white
                classDef framework fill:#FF9800,stroke:#E65100,color:white
                classDef infra fill:#4CAF50,stroke:#2E7D32,color:white
                class RouterAI,TransformAI,ValidateAI,ThrottleAI,RetentionAI,SupervisorAI,ForecastAI ai
                class Router,Transformer,Validator,Throttle,Retention,Logger framework
                class Kafka,PostgreSQL,Prometheus,ModelRegistry infra
        </div>

        <h5 style="margin-top: 20px;"><i class="fas fa-rocket"></i> Deployment Strategy</h5>
        <ol style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
            <li><strong>Model Development:</strong> Train initial models on historical payment data</li>
            <li><strong>Service Packaging:</strong> Containerize AI services for Kubernetes deployment</li>
            <li><strong>Integration Testing:</strong> Validate AI components with framework in staging</li>
            <li><strong>Canary Deployment:</strong> Gradual rollout starting with non-critical payments</li>
            <li><strong>Performance Monitoring:</strong> Track AI decision quality and system impact</li>
            <li><strong>Continuous Learning:</strong> Implement feedback loops for model improvement</li>
            <li><strong>Fallback Mechanisms:</strong> Ensure graceful degradation if AI services fail</li>
        </ol>

        <h5 style="margin-top: 20px;"><i class="fas fa-chart-line"></i> Performance Metrics</h5>
        <div style="margin-top: 15px; overflow-x: auto;">
            <table style="width: 100%; border-collapse: collapse; font-size: 0.9rem;">
                <thead>
                    <tr style="background-color: var(--primary); color: white;">
                        <th style="padding: 10px; text-align: left;">Component</th>
                        <th style="padding: 10px; text-align: left;">Metric</th>
                        <th style="padding: 10px; text-align: left;">Target Improvement</th>
                        <th style="padding: 10px; text-align: left;">Measurement Method</th>
                    </tr>
                </thead>
                <tbody>
                    <tr style="border-bottom: 1px solid #eee;">
                        <td style="padding: 10px;" rowspan="3">AI Smart Router</td>
                        <td style="padding: 10px;">Routing Accuracy</td>
                        <td style="padding: 10px;">+25%</td>
                        <td style="padding: 10px;">% of optimal routes selected</td>
                    </tr>
                    <tr style="border-bottom: 1px solid #eee;">
                        <td style="padding: 10px;">Decision Latency</td>
                        <td style="padding: 10px;">-40%</td>
                        <td style="padding: 10px;">Average routing decision time</td>
                    </tr>
                    <tr style="border-bottom: 1px solid #eee;">
                        <td style="padding: 10px;">SLA Compliance</td>
                        <td style="padding: 10px;">+15%</td>
                        <td style="padding: 10px;">% of payments meeting SLAs</td>
                    </tr>
                    <tr style="border-bottom: 1px solid #eee; background-color: #f9f9f9;">
                        <td style="padding: 10px;" rowspan="3">AI Transformer</td>
                        <td style="padding: 10px;">Transformation Accuracy</td>
                        <td style="padding: 10px;">+30%</td>
                        <td style="padding: 10px;">% of error-free transformations</td>
                    </tr>
                    <tr style="border-bottom: 1px solid #eee; background-color: #f9f9f9;">
                        <td style="padding: 10px;">Format Detection</td>
                        <td style="padding: 10px;">+35%</td>
                        <td style="padding: 10px;">% of correct format identifications</td>
                    </tr>
                    <tr style="border-bottom: 1px solid #eee; background-color: #f9f9f9;">
                        <td style="padding: 10px;">Processing Time</td>
                        <td style="padding: 10px;">-25%</td>
                        <td style="padding: 10px;">Average transformation time</td>
                    </tr>
                    <tr style="border-bottom: 1px solid #eee;">
                        <td style="padding: 10px;" rowspan="3">AI Validator</td>
                        <td style="padding: 10px;">Fraud Detection</td>
                        <td style="padding: 10px;">+40%</td>
                        <td style="padding: 10px;">True positive rate</td>
                    </tr>
                    <tr style="border-bottom: 1px solid #eee;">
                        <td style="padding: 10px;">False Positives</td>
                        <td style="padding: 10px;">-50%</td>
                        <td style="padding: 10px;">Reduction in false fraud alerts</td>
                    </tr>
                    <tr style="border-bottom: 1px solid #eee;">
                        <td style="padding: 10px;">Validation Time</td>
                        <td style="padding: 10px;">-30%</td>
                        <td style="padding: 10px;">Average validation duration</td>
                    </tr>
                    <tr style="border-bottom: 1px solid #eee; background-color: #f9f9f9;">
                        <td style="padding: 10px;" rowspan="2">AI Throttle</td>
                        <td style="padding: 10px;">Throughput Optimization</td>
                        <td style="padding: 10px;">+20%</td>
                        <td style="padding: 10px;">Transactions/second at peak</td>
                    </tr>
                    <tr style="border-bottom: 1px solid #eee; background-color: #f9f9f9;">
                        <td style="padding: 10px;">Resource Utilization</td>
                        <td style="padding: 10px;">-15%</td>
                        <td style="padding: 10px;">CPU/memory usage at load</td>
                    </tr>
                    <tr style="border-bottom: 1px solid #eee;">
                        <td style="padding: 10px;" rowspan="2">AI Retention</td>
                        <td style="padding: 10px;">Storage Efficiency</td>
                        <td style="padding: 10px;">+25%</td>
                        <td style="padding: 10px;">Data compression ratio</td>
                    </tr>
                    <tr style="border-bottom: 1px solid #eee;">
                        <td style="padding: 10px;">Retrieval Performance</td>
                        <td style="padding: 10px;">-40%</td>
                        <td style="padding: 10px;">Average retrieval time</td>
                    </tr>
                    <tr style="border-bottom: 1px solid #eee; background-color: #f9f9f9;">
                        <td style="padding: 10px;" rowspan="2">AI Supervisor</td>
                        <td style="padding: 10px;">Anomaly Detection</td>
                        <td style="padding: 10px;">+60%</td>
                        <td style="padding: 10px;">True positive rate</td>
                    </tr>
                    <tr style="border-bottom: 1px solid #eee; background-color: #f9f9f9;">
                        <td style="padding: 10px;">MTTR Improvement</td>
                        <td style="padding: 10px;">-50%</td>
                        <td style="padding: 10px;">Mean time to resolve issues</td>
                    </tr>
                    <tr style="border-bottom: 1px solid #eee;">
                        <td style="padding: 10px;" rowspan="2">AI Forecast</td>
                        <td style="padding: 10px;">Volume Forecast Accuracy</td>
                        <td style="padding: 10px;">+45%</td>
                        <td style="padding: 10px;">MAPE (Mean Absolute Percentage Error)</td>
                    </tr>
                    <tr style="border-bottom: 1px solid #eee;">
                        <td style="padding: 10px;">Resource Forecast Accuracy</td>
                        <td style="padding: 10px;">+40%</td>
                        <td style="padding: 10px;">Capacity planning accuracy</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

    </div>
</section>


<!-- Payment Handling -->
<section id="payment" class="tab-content">
    <h2><i class="fas fa-credit-card"></i> Payment Handling</h2>
    <div class="architecture-diagram">
        <div class="diagram-header">
            <h3>Simplified Payment Processing Architecture</h3>
            <div class="diagram-actions">
                <button class="btn btn-primary" onclick="zoomIn('paymentDiagram')"><i class="fas fa-search-plus"></i> Zoom</button>
                <button class="btn btn-outline" onclick="resetZoom('paymentDiagram')"><i class="fas fa-sync"></i> Reset</button>
            </div>
        </div>
        <div class="mermaid" id="paymentDiagram">
            %%{init: {'theme': 'default', 'flowchart': {'useMaxWidth': true, 'htmlLabels': true, 'curve': 'basis'}}}%%
            graph TB
                %% Custom CSS for node styling
                classDef input fill:#64B5F6,stroke:#1976D2,color:#000,stroke-width:1px;
                classDef process fill:#FFB74D,stroke:#F57C00,color:#000,stroke-width:1px;
                classDef storage fill:#BA68C8,stroke:#7B1FA2,color:#FFF,stroke-width:1px;
                classDef external fill:#4DD0E1,stroke:#00ACC1,color:#000,stroke-width:1px;
                classDef kafka fill:#81C784,stroke:#388E3C,color:#000,stroke-width:1px;
                classDef error fill:#EF9A9A,stroke:#C62828,color:#000,stroke-width:1px;

                %% Input Sources (Grouped by category)
                subgraph InputSources["Payment Input Sources"]
                    direction TB
                    subgraph Domestic["Domestic Payments"]
                        ACH[ACH Files]
                        BACS[BACS]
                        FasterPay[Faster Payments]
                        GIRO[GIRO]
                    end
                    class ACH,BACS,FasterPay,GIRO input;

                    subgraph Regional["Regional Payments"]
                        SEPA[SEPA]
                        SEPAInst[SEPA Instant]
                        TARGET2[TARGET2]
                    end
                    class SEPA,SEPAInst,TARGET2 input;

                    subgraph International["International Payments"]
                        SWIFT_MT[SWIFT MT]
                        SWIFT_MX[SWIFT MX]
                        Fedwire[Fedwire]
                    end
                    class SWIFT_MT,SWIFT_MX,Fedwire input;

                    subgraph RealTime["Real-Time Payments"]
                        RTP[RTP Network]
                        UPI[UPI]
                        PIX[PIX]
                        PayNow[PayNow]
                    end
                    class RTP,UPI,PIX,PayNow input;

                    subgraph Legacy["Legacy Systems"]
                        COBOL[COBOL Files]
                        EDI[EDI 820]
                        MT940[MT940]
                    end
                    class COBOL,EDI,MT940 input;
                end

                %% Core Processing Components
                subgraph CoreProcessing["Payment Processing Engine"]
                    direction TB
                    Router[Payment Router]
                    Validator[Validator]
                    Transformer[Transformer]
                    FraudCheck[Fraud Detection]
                    Logger[Audit Logger]
                end
                class Router,Validator,Transformer,FraudCheck,Logger process;

                %% Kafka Topics
                subgraph KafkaBroker["Kafka Message Broker"]
                    direction TB
                    InputTopic[Input Topic]
                    ProcessTopic[Processing Topic]
                    OutputTopic[Output Topic]
                    ErrorTopic[Error Topic]
                end
                class InputTopic,ProcessTopic,OutputTopic,ErrorTopic kafka;

                %% External Systems
                subgraph ExternalSystems["External Systems"]
                    direction TB
                    subgraph Banking["Core Banking"]
                        CoreBanking[Core Banking System]
                    end
                    class CoreBanking external;

                    subgraph Networks["Payment Networks"]
                        SEPANet[SEPA Network]
                        SWIFTNet[SWIFT Network]
                        FedwireNet[Federal Reserve]
                        RTPNet[RTP Network]
                        UPINet[UPI Network]
                    end
                    class SEPANet,SWIFTNet,FedwireNet,RTPNet,UPINet external;
                end

                %% Data Storage
                subgraph DataStorage["Data Storage"]
                    direction TB
                    TransactionsDB[(Transactions DB)]
                    AuditLogs[(Audit Logs)]
                    ReferenceData[(Reference Data)]
                end
                class TransactionsDB,AuditLogs,ReferenceData storage;

                %% Connections
                %% From Input to Kafka
                ACH -->|NACHA| InputTopic
                BACS -->|UK Standard| InputTopic
                FasterPay -->|UK Faster| InputTopic
                GIRO -->|National| InputTopic
                SEPA -->|pain.001| InputTopic
                SEPAInst -->|pain.001| InputTopic
                TARGET2 -->|TARGET2| InputTopic
                SWIFT_MT -->|MT103/202| InputTopic
                SWIFT_MX -->|ISO 20022| InputTopic
                Fedwire -->|Fedwire| InputTopic
                RTP -->|ISO 20022| InputTopic
                UPI -->|NPCI| InputTopic
                PIX -->|Banco Central| InputTopic
                PayNow -->|MAS| InputTopic
                COBOL -->|Legacy| InputTopic
                EDI -->|ANSI X12| InputTopic
                MT940 -->|SWIFT| InputTopic

                %% Processing Flow
                InputTopic --> Router
                Router -->|Route| Validator
                Validator -->|Valid| Transformer
                Validator -->|Invalid| ErrorTopic
                Transformer --> FraudCheck
                FraudCheck -->|Clean| ProcessTopic
                FraudCheck -->|Suspicious| ErrorTopic
                ProcessTopic -->|Process| ExternalSystems
                ExternalSystems -->|Response| OutputTopic
                OutputTopic --> Logger
                ErrorTopic --> Logger

                %% Data Storage Connections
                Logger --> AuditLogs
                Transformer -.-> ReferenceData
                ExternalSystems --> TransactionsDB
                FraudCheck -.-> ReferenceData

                %% External System Connections
                ProcessTopic -->|SEPA| SEPANet
                ProcessTopic -->|SWIFT| SWIFTNet
                ProcessTopic -->|Fedwire| FedwireNet
                ProcessTopic -->|RTP| RTPNet
                ProcessTopic -->|UPI| UPINet
                ProcessTopic -->|Core| CoreBanking
        </div>
    </div>

    <!-- Payment Formats Summary Table -->
    <div class="component-details">
        <h3><i class="fas fa-table"></i> Comprehensive Payment Formats Summary</h3>
        <div class="architecture-card" style="overflow-x: auto;">
            <table style="width: 100%; border-collapse: collapse; margin: 1rem 0; font-size: 0.9rem;">
                <thead>
                    <tr style="background-color: var(--primary); color: white; text-align: left;">
                        <th style="padding: 12px 15px; border: 1px solid #ddd;">Category</th>
                        <th style="padding: 12px 15px; border: 1px solid #ddd;">Format/Scheme</th>
                        <th style="padding: 12px 15px; border: 1px solid #ddd;">Standard</th>
                        <th style="padding: 12px 15px; border: 1px solid #ddd;">Primary Region</th>
                        <th style="padding: 12px 15px; border: 1px solid #ddd;">Processing Time</th>
                        <th style="padding: 12px 15px; border: 1px solid #ddd;">Use Case</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Domestic Payments -->
                    <tr style="border-bottom: 1px solid #ddd; background-color: white;">
                        <td style="padding: 12px 15px;" rowspan="4">Domestic</td>
                        <td style="padding: 12px 15px;">ACH</td>
                        <td style="padding: 12px 15px;">NACHA</td>
                        <td style="padding: 12px 15px;">United States</td>
                        <td style="padding: 12px 15px;">1-2 business days</td>
                        <td style="padding: 12px 15px;">Payroll, direct deposits, bill payments</td>
                    </tr>
                    <tr style="border-bottom: 1px solid #ddd; background-color: #f9f9f9;">
                        <td style="padding: 12px 15px;">BACS</td>
                        <td style="padding: 12px 15px;">UK Standard</td>
                        <td style="padding: 12px 15px;">United Kingdom</td>
                        <td style="padding: 12px 15px;">3 business days</td>
                        <td style="padding: 12px 15px;">Salary payments, direct debits</td>
                    </tr>
                    <tr style="border-bottom: 1px solid #ddd; background-color: white;">
                        <td style="padding: 12px 15px;">Faster Payments</td>
                        <td style="padding: 12px 15px;">UK Faster Payments</td>
                        <td style="padding: 12px 15px;">United Kingdom</td>
                        <td style="padding: 12px 15px;">Near real-time</td>
                        <td style="padding: 12px 15px;">Online banking transfers, standing orders</td>
                    </tr>
                    <tr style="border-bottom: 1px solid #ddd; background-color: #f9f9f9;">
                        <td style="padding: 12px 15px;">GIRO</td>
                        <td style="padding: 12px 15px;">National Standards</td>
                        <td style="padding: 12px 15px;">Netherlands, Germany</td>
                        <td style="padding: 12px 15px;">1 business day</td>
                        <td style="padding: 12px 15px;">Salary payments, tax collections</td>
                    </tr>

                    <!-- Regional Payments -->
                    <tr style="border-bottom: 1px solid #ddd; background-color: white;">
                        <td style="padding: 12px 15px;" rowspan="3">Regional</td>
                        <td style="padding: 12px 15px;">SEPA Credit Transfer</td>
                        <td style="padding: 12px 15px;">ISO 20022 (pain.001)</td>
                        <td style="padding: 12px 15px;">Eurozone</td>
                        <td style="padding: 12px 15px;">1 business day</td>
                        <td style="padding: 12px 15px;">Euro denominated payments within SEPA zone</td>
                    </tr>
                    <tr style="border-bottom: 1px solid #ddd; background-color: #f9f9f9;">
                        <td style="padding: 12px 15px;">SEPA Direct Debit</td>
                        <td style="padding: 12px 15px;">ISO 20022 (pain.008)</td>
                        <td style="padding: 12px 15px;">Eurozone</td>
                        <td style="padding: 12px 15px;">2-3 business days</td>
                        <td style="padding: 12px 15px;">Recurring payments, utility bills</td>
                    </tr>
                    <tr style="border-bottom: 1px solid #ddd; background-color: white;">
                        <td style="padding: 12px 15px;">SEPA Instant</td>
                        <td style="padding: 12px 15px;">ISO 20022</td>
                        <td style="padding: 12px 15px;">Eurozone</td>
                        <td style="padding: 12px 15px;">&lt;10 seconds</td>
                        <td style="padding: 12px 15px;">Real-time euro payments</td>
                    </tr>

                    <!-- International Payments -->
                    <tr style="border-bottom: 1px solid #ddd; background-color: #f9f9f9;">
                        <td style="padding: 12px 15px;" rowspan="3">International</td>
                        <td style="padding: 12px 15px;">SWIFT MT103</td>
                        <td style="padding: 12px 15px;">SWIFT Standard</td>
                        <td style="padding: 12px 15px;">Global</td>
                        <td style="padding: 12px 15px;">1-5 business days</td>
                        <td style="padding: 12px 15px;">Cross-border single customer transfers</td>
                    </tr>
                    <tr style="border-bottom: 1px solid #ddd; background-color: white;">
                        <td style="padding: 12px 15px;">SWIFT MT202</td>
                        <td style="padding: 12px 15px;">SWIFT Standard</td>
                        <td style="padding: 12px 15px;">Global</td>
                        <td style="padding: 12px 15px;">Same day</td>
                        <td style="padding: 12px 15px;">Bank-to-bank transfers</td>
                    </tr>
                    <tr style="border-bottom: 1px solid #ddd; background-color: #f9f9f9;">
                        <td style="padding: 12px 15px;">SWIFT MX</td>
                        <td style="padding: 12px 15px;">ISO 20022</td>
                        <td style="padding: 12px 15px;">Global</td>
                        <td style="padding: 12px 15px;">Same day</td>
                        <td style="padding: 12px 15px;">Rich data cross-border payments</td>
                    </tr>

                    <!-- Real-Time Payments -->
                    <tr style="border-bottom: 1px solid #ddd; background-color: white;">
                        <td style="padding: 12px 15px;" rowspan="5">Real-Time</td>
                        <td style="padding: 12px 15px;">RTP</td>
                        <td style="padding: 12px 15px;">ISO 20022</td>
                        <td style="padding: 12px 15px;">United States</td>
                        <td style="padding: 12px 15px;">Real-time</td>
                        <td style="padding: 12px 15px;">24/7 real-time USD payments</td>
                    </tr>
                    <tr style="border-bottom: 1px solid #ddd; background-color: #f9f9f9;">
                        <td style="padding: 12px 15px;">UPI</td>
                        <td style="padding: 12px 15px;">NPCI Standard</td>
                        <td style="padding: 12px 15px;">India</td>
                        <td style="padding: 12px 15px;">Real-time</td>
                        <td style="padding: 12px 15px;">24/7 INR payments via mobile</td>
                    </tr>
                    <tr style="border-bottom: 1px solid #ddd; background-color: white;">
                        <td style="padding: 12px 15px;">PIX</td>
                        <td style="padding: 12px 15px;">Banco Central do Brasil</td>
                        <td style="padding: 12px 15px;">Brazil</td>
                        <td style="padding: 12px 15px;">Real-time</td>
                        <td style="padding: 12px 15px;">24/7 BRL payments</td>
                    </tr>
                    <tr style="border-bottom: 1px solid #ddd; background-color: #f9f9f9;">
                        <td style="padding: 12px 15px;">PayNow</td>
                        <td style="padding: 12px 15px;">MAS Standard</td>
                        <td style="padding: 12px 15px;">Singapore</td>
                        <td style="padding: 12px 15px;">Real-time</td>
                        <td style="padding: 12px 15px;">24/7 SGD payments</td>
                    </tr>
                    <tr style="border-bottom: 1px solid #ddd; background-color: white;">
                        <td style="padding: 12px 15px;">FedNow</td>
                        <td style="padding: 12px 15px;">Federal Reserve</td>
                        <td style="padding: 12px 15px;">United States</td>
                        <td style="padding: 12px 15px;">Real-time</td>
                        <td style="padding: 12px 15px;">24/7 instant USD payments</td>
                    </tr>

                    <!-- Legacy Formats -->
                    <tr style="border-bottom: 1px solid #ddd; background-color: #f9f9f9;">
                        <td style="padding: 12px 15px;" rowspan="3">Legacy</td>
                        <td style="padding: 12px 15px;">COBOL Copybook</td>
                        <td style="padding: 12px 15px;">Proprietary</td>
                        <td style="padding: 12px 15px;">Global</td>
                        <td style="padding: 12px 15px;">Batch</td>
                        <td style="padding: 12px 15px;">Mainframe banking systems</td>
                    </tr>
                    <tr style="border-bottom: 1px solid #ddd; background-color: white;">
                        <td style="padding: 12px 15px;">EDI 820</td>
                        <td style="padding: 12px 15px;">ANSI X12</td>
                        <td style="padding: 12px 15px;">North America</td>
                        <td style="padding: 12px 15px;">Batch</td>
                        <td style="padding: 12px 15px;">Payment orders/remittance</td>
                    </tr>
                    <tr style="border-bottom: 1px solid #ddd; background-color: #f9f9f9;">
                        <td style="padding: 12px 15px;">MT940/942</td>
                        <td style="padding: 12px 15px;">SWIFT</td>
                        <td style="padding: 12px 15px;">Global</td>
                        <td style="padding: 12px 15px;">Daily</td>
                        <td style="padding: 12px 15px;">Bank statements</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <!-- Payment Processing Components -->
    <div class="component-details">
        <h3><i class="fas fa-cogs"></i> Payment Processing Components</h3>

        <h4><i class="fas fa-exchange-alt"></i> Payment Input Adapters</h4>
        <div class="architecture-grid">
            <div class="architecture-card">
                <h4><i class="fas fa-globe"></i> Global Payment Adapters</h4>
                <p>Handles international payment formats:</p>
                <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                    <li><strong>SWIFT Adapter:</strong> Processes SWIFT MT103/MT202 and MX messages</li>
                    <li><strong>ISO 20022 Adapter:</strong> Handles all ISO 20022 message types</li>
                    <li><strong>Cross-Border Router:</strong> Determines optimal routing for international payments</li>
                    <li><strong>Currency Converter:</strong> Handles currency conversion for cross-border payments</li>
                </ul>
                <div class="tech-pill pill-camel">Camel K</div>
                <div class="tech-pill pill-kafka">Kafka</div>
            </div>

            <div class="architecture-card">
                <h4><i class="fas fa-euro-sign"></i> European Payment Adapters</h4>
                <p>Specialized components for European payment schemes:</p>
                <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                    <li><strong>SEPA Credit Transfer:</strong> Processes pain.001 messages</li>
                    <li><strong>SEPA Direct Debit:</strong> Handles pain.008 messages</li>
                    <li><strong>SEPA Instant:</strong> Real-time processing for instant payments</li>
                    <li><strong>TARGET2 Adapter:</strong> For high-value euro payments</li>
                </ul>
                <div class="tech-pill pill-camel">Camel K</div>
                <div class="tech-pill pill-kafka">Kafka</div>
            </div>

            <div class="architecture-card">
                <h4><i class="fas fa-dollar-sign"></i> North American Payment Adapters</h4>
                <p>Components for US and Canadian payment systems:</p>
                <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                    <li><strong>ACH Processor:</strong> Handles NACHA-formatted files</li>
                    <li><strong>Fedwire Adapter:</strong> For Federal Reserve Wire Transfers</li>
                    <li><strong>RTP Connector:</strong> Real-Time Payments network integration</li>
                    <li><strong>FedNow Adapter:</strong> New FedNow Service integration</li>
                </ul>
                <div class="tech-pill pill-camel">Camel K</div>
                <div class="tech-pill pill-kafka">Kafka</div>
            </div>

            <div class="architecture-card">
                <h4><i class="fas fa-globe-americas"></i> Real-Time Payment Adapters</h4>
                <p>Adapters for modern real-time payment systems:</p>
                <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                    <li><strong>UPI Connector:</strong> Unified Payments Interface (India)</li>
                    <li><strong>PIX Adapter:</strong> Brazilian Instant Payment System</li>
                    <li><strong>PayNow Connector:</strong> Singapore Fast Payment System</li>
                    <li><strong>Faster Payments:</strong> UK real-time payment system</li>
                </ul>
                <div class="tech-pill pill-camel">Camel K</div>
                <div class="tech-pill pill-kafka">Kafka</div>
            </div>
        </div>

        <h4><i class="fas fa-cogs"></i> Core Processing Components</h4>
        <div class="architecture-grid">
            <div class="architecture-card">
                <h4><i class="fas fa-route"></i> Intelligent Payment Router</h4>
                <p>Dynamic routing based on multiple factors:</p>
                <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                    <li>Payment type and scheme</li>
                    <li>Currency and amount</li>
                    <li>Destination country and bank</li>
                    <li>Processing urgency (real-time vs. batch)</li>
                    <li>Availability of destination systems</li>
                    <li>Cost optimization routes</li>
                </ul>
                <div class="tech-pill pill-camel">Camel K</div>
            </div>

            <div class="architecture-card">
                <h4><i class="fas fa-exchange-alt"></i> Universal Payment Transformer</h4>
                <p>Transforms between different payment formats:</p>
                <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                    <li>ISO 20022 ↔ SWIFT MT conversion</li>
                    <li>PAIN.001 ↔ NACHA ACH conversion</li>
                    <li>JSON ↔ XML transformation</li>
                    <li>Legacy format modernization (COBOL → ISO 20022)</li>
                    <li>Data enrichment with reference information</li>
                    <li>Normalization of different date/amount formats</li>
                </ul>
                <div class="tech-pill pill-camel">Camel K</div>
            </div>

            <div class="architecture-card">
                <h4><i class="fas fa-user-shield"></i> Advanced Fraud Detection</h4>
                <p>Multi-layer fraud detection system:</p>
                <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                    <li>Real-time transaction monitoring</li>
                    <li>Behavioral analysis and anomaly detection</li>
                    <li>Velocity checking (transaction frequency)</li>
                    <li>Geographic risk assessment</li>
                    <li>Watchlist screening (sanctions, PEP)</li>
                    <li>Machine learning-based fraud patterns</li>
                    <li>Link analysis for related transactions</li>
                </ul>
                <div class="tech-pill pill-quarkus">Quarkus</div>
            </div>

            <div class="architecture-card">
                <h4><i class="fas fa-shield-alt"></i> Compliance Engine</h4>
                <p>Ensures compliance with financial regulations:</p>
                <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                    <li>AML (Anti-Money Laundering) checks</li>
                    <li>CTF (Counter Terrorist Financing) compliance</li>
                    <li>Sanctions screening against global lists</li>
                    <li>Regulatory reporting generation</li>
                    <li>Transaction limits enforcement</li>
                    <li>Customer due diligence checks</li>
                </ul>
                <div class="tech-pill pill-quarkus">Quarkus</div>
            </div>
        </div>

        <h4><i class="fas fa-database"></i> Data Management Components</h4>
        <div class="architecture-grid">
            <div class="architecture-card">
                <h4><i class="fas fa-file-invoice"></i> Transaction Repository</h4>
                <p>Comprehensive storage of all payment transactions:</p>
                <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                    <li>Complete transaction history with all details</li>
                    <li>Search and reporting capabilities</li>
                    <li>Data retention for compliance (7+ years)</li>
                    <li>Indexing for fast retrieval by multiple criteria</li>
                    <li>Immutable audit trail for all changes</li>
                    <li>Support for legal holds and eDiscovery</li>
                </ul>
                <div class="tech-pill pill-postgres">PostgreSQL</div>
            </div>

            <div class="architecture-card">
                <h4><i class="fas fa-history"></i> Audit Log System</h4>
                <p>Detailed logging of all payment activities:</p>
                <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                    <li>Complete end-to-end audit trail</li>
                    <li>User actions and system events with timestamps</li>
                    <li>Digital signatures for non-repudiation</li>
                    <li>Compliance reporting generation</li>
                    <li>Forensic analysis support</li>
                    <li>Integration with SIEM systems</li>
                </ul>
                <div class="tech-pill pill-postgres">PostgreSQL</div>
            </div>

            <div class="architecture-card">
                <h4><i class="fas fa-sitemap"></i> Reference Data Service</h4>
                <p>Centralized reference data management:</p>
                <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                    <li>Bank and branch codes (BIC, ABA, Sort Codes)</li>
                    <li>Currency codes and exchange rates</li>
                    <li>Country and regulatory codes</li>
                    <li>Payment scheme rules and requirements</li>
                    <li>Holiday calendars for processing</li>
                    <li>Cut-off times for different payment types</li>
                </ul>
                <div class="tech-pill pill-quarkus">Quarkus</div>
            </div>
        </div>

        <div class="architecture-card" style="grid-column: 1 / -1; margin-top: 20px;">
            <h4><i class="fas fa-project-diagram"></i> End-to-End Payment Processing Flow</h4>
            <p>The payment processing follows this comprehensive workflow:</p>
            <ol style="margin-top: 10px; padding-left: 20px;">
                <li><strong>Input Reception:</strong> Payment requests received through various channels (API, file upload, real-time networks)</li>
                <li><strong>Format Identification:</strong> Determine the payment format and scheme</li>
                <li><strong>Initial Validation:</strong> Basic validation of required fields and formats</li>
                <li><strong>Scheme-Specific Processing:</strong> Apply format-specific parsing and validation rules</li>
                <li><strong>Fraud Screening:</strong> Real-time fraud detection and prevention checks</li>
                <li><strong>Compliance Checks:</strong> AML, CTF, and sanctions screening</li>
                <li><strong>Routing Determination:</strong> Select optimal processing path based on multiple factors</li>
                <li><strong>Format Transformation:</strong> Convert to the required format for the destination system</li>
                <li><strong>Data Enrichment:</strong> Add required routing information and reference data</li>
                <li><strong>Submission:</strong> Secure submission to the appropriate payment network or banking system</li>
                <li><strong>Response Handling:</strong> Process acknowledgments, confirmations, or rejections</li>
                <li><strong>Status Notification:</strong> Update originating system and notify customer</li>
                <li><strong>Reconciliation:</strong> Match responses with original requests</li>
                <li><strong>Archiving:</strong> Long-term storage of transaction records for compliance</li>
                <li><strong>Reporting:</strong> Generate reports for operations, compliance, and analytics</li>
            </ol>
            <p style="margin-top: 15px;"><strong>Key Architecture Principles:</strong></p>
            <ul style="margin-top: 10px; padding-left: 20px;">
                <li><strong>Modular Design:</strong> Each component has a single responsibility and clear interfaces</li>
                <li><strong>Loose Coupling:</strong> Components communicate via well-defined contracts (Kafka topics, REST APIs)</li>
                <li><strong>Scalability:</strong> All components can scale horizontally to handle increased load</li>
                <li><strong>Resilience:</strong> Built-in fault tolerance and recovery mechanisms</li>
                <li><strong>Observability:</strong> Comprehensive monitoring and logging at every step</li>
                <li><strong>Security:</strong> Defense-in-depth security at all layers</li>
                <li><strong>Compliance:</strong> Designed to meet global financial regulations</li>
                <li><strong>Extensibility:</strong> Easy to add new payment types and processing rules</li>
            </ul>
        </div>
    </div>
<!-- Add this to your Payment Handling section -->
<div class="component-details">
    <h3><i class="fas fa-database"></i> Common Data Model (CDM) Architecture</h3>

    <div class="architecture-card" style="grid-column: 1 / -1;">
        <h4><i class="fas fa-project-diagram"></i> CDM Overview</h4>
        <p>A Common Data Model (CDM) provides a standardized internal representation of all payment types, enabling consistent processing across the platform:</p>

        <div style="margin-top: 20px;">
            <h5><i class="fas fa-cogs"></i> CDM Benefits</h5>
            <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                <li><strong>Consistency:</strong> Uniform data structure across all payment types</li>
                <li><strong>Simplification:</strong> Reduces complexity in processing different payment formats</li>
                <li><strong>Reusability:</strong> Common validation, routing, and processing logic</li>
                <li><strong>Extensibility:</strong> Easy to add new payment types</li>
                <li><strong>Maintainability:</strong> Single model to update when requirements change</li>
                <li><strong>Interoperability:</strong> Standard interface between components</li>
            </ul>
        </div>

        <div style="margin-top: 20px;">
            <h5><i class="fas fa-sitemap"></i> CDM Implementation</h5>
            <p>The CDM is implemented as a set of standardized data structures and transformation rules:</p>

            <div class="mermaid" style="margin-top: 15px; text-align: center;">
                %%{init: {'theme': 'default'}}%%
                classDiagram
                    class CommonPayment {
                        +String paymentId
                        +String correlationId
                        +DateTime initiationDate
                        +DateTime executionDate
                        +String paymentType
                        +String paymentScheme
                        +String status
                        +String currency
                        +BigDecimal amount
                        +Debtor debtor
                        +Creditor creditor
                        +PaymentPurpose purpose
                        +List~PaymentInstruction~ instructions
                        +List~PaymentFee~ fees
                        +List~PaymentTax~ taxes
                        +List~PaymentAttribute~ customAttributes
                        +validate()
                        +enrich()
                        +route()
                    }

                    class Debtor {
                        +String id
                        +String name
                        +String accountNumber
                        +String bankId
                        +String bankName
                        +Address address
                    }

                    class Creditor {
                        +String id
                        +String name
                        +String accountNumber
                        +String bankId
                        +String bankName
                        +Address address
                    }

                    class PaymentInstruction {
                        +String instructionId
                        +String type
                        +String priority
                        +DateTime executionDate
                        +BigDecimal amount
                        +String currency
                    }

                    class PaymentPurpose {
                        +String code
                        +String description
                        +String category
                    }

                    class Address {
                        +String street
                        +String city
                        +String postalCode
                        +String country
                    }

                    CommonPayment "1" *-- "1" Debtor
                    CommonPayment "1" *-- "1" Creditor
                    CommonPayment "1" *-- "1" PaymentPurpose
                    CommonPayment "1" *-- "*" PaymentInstruction
            </div>

            <p style="margin-top: 15px;"><strong>CDM Components:</strong></p>
            <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                <li><strong>Core Payment Entity:</strong> Standard fields for all payment types (ID, amounts, dates, parties, status)</li>
                <li><strong>Party Information:</strong> Standardized debtor/creditor information with validation rules</li>
                <li><strong>Payment Instructions:</strong> Flexible structure for different instruction types</li>
                <li><strong>Purpose Codes:</strong> Standardized categorization of payment purposes</li>
                <li><strong>Custom Attributes:</strong> Extensible structure for payment-type specific fields</li>
                <li><strong>Validation Rules:</strong> Common validation logic for all payments</li>
                <li><strong>Transformation Methods:</strong> Standard methods for converting to/from external formats</li>
            </ul>
        </div>
    </div>

    <div class="architecture-card" style="grid-column: 1 / -1; margin-top: 20px;">
        <h4><i class="fas fa-exchange-alt"></i> CDM Integration Architecture</h4>
        <p>The CDM integrates with all components of the payment processing platform:</p>

        <div class="mermaid" style="margin-top: 15px; text-align: center;">
            %%{init: {'theme': 'default', 'flowchart': {'useMaxWidth': true}}}%%
            graph LR
                %% Input Formats
                subgraph Input["Input Formats"]
                    SEPA[SEPA PAIN.001]
                    SWIFT[SWIFT MT103]
                    ACH[ACH NACHA]
                    ISO[ISO 20022]
                    COBOL[COBOL]
                    API[REST API]
                end

                %% Transformation Layer
                subgraph Transformation["Transformation Layer"]
                    SEPA_Transformer[SEPA Transformer]
                    SWIFT_Transformer[SWIFT Transformer]
                    ACH_Transformer[ACH Transformer]
                    ISO_Transformer[ISO Transformer]
                    COBOL_Transformer[COBOL Transformer]
                    API_Transformer[API Transformer]
                end

                %% Common Data Model
                subgraph CDM["Common Data Model"]
                    CoreModel[Core Payment Model]
                    Validation[Validation Rules]
                    Enrichment[Data Enrichment]
                    Routing[Routing Rules]
                end

                %% Processing Components
                subgraph Processing["Processing Components"]
                    FraudDetection[Fraud Detection]
                    Compliance[Compliance Checks]
                    Limits[Limit Checks]
                    Fees[Fee Calculation]
                end

                %% Output Formats
                subgraph Output["Output Formats"]
                    SEPA_Out[SEPA PAIN.002]
                    SWIFT_Out[SWIFT MT103]
                    ACH_Out[ACH NACHA]
                    DB[Database]
                    Audit[Audit Log]
                end

                %% Connections
                SEPA --> SEPA_Transformer
                SWIFT --> SWIFT_Transformer
                ACH --> ACH_Transformer
                ISO --> ISO_Transformer
                COBOL --> COBOL_Transformer
                API --> API_Transformer

                SEPA_Transformer --> CoreModel
                SWIFT_Transformer --> CoreModel
                ACH_Transformer --> CoreModel
                ISO_Transformer --> CoreModel
                COBOL_Transformer --> CoreModel
                API_Transformer --> CoreModel

                CoreModel --> Validation
                CoreModel --> Enrichment
                CoreModel --> Routing

                Validation --> FraudDetection
                Validation --> Compliance
                Validation --> Limits
                Validation --> Fees

                Routing --> SEPA_Out
                Routing --> SWIFT_Out
                Routing --> ACH_Out
                Routing --> DB
                Routing --> Audit

                style CoreModel fill:#4CAF50,stroke:#2E7D32,color:white
                style Validation fill:#FF9800,stroke:#E65100,color:white
                style Enrichment fill:#FF9800,stroke:#E65100,color:white
                style Routing fill:#FF9800,stroke:#E65100,color:white
        </div>

        <p style="margin-top: 15px;"><strong>CDM Workflow:</strong></p>
        <ol style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
            <li><strong>Input Reception:</strong> Payment messages received in various formats (SEPA, SWIFT, ACH, etc.)</li>
            <li><strong>Format-Specific Transformation:</strong> Each input format transformed to the common internal model</li>
            <li><strong>Validation:</strong> Common validation rules applied to all payments</li>
            <li><strong>Enrichment:</strong> Additional data added (e.g., bank details, routing information)</li>
            <li><strong>Processing:</strong> Common processing components (fraud, compliance, limits, fees)</li>
            <li><strong>Routing:</strong> Determine output format and destination based on payment type and rules</li>
            <li><strong>Output Generation:</strong> Transform back to required output format</li>
        </ol>
    </div>

    <div class="architecture-card" style="grid-column: 1 / -1; margin-top: 20px;">
        <h4><i class="fas fa-code"></i> CDM Implementation Details</h4>

        <h5 style="margin-top: 15px;"><i class="fas fa-database"></i> Data Structure</h5>
        <p>The CDM is implemented as a set of Java classes with the following key components:</p>

        <div style="margin-top: 15px; background: #f8f9fa; padding: 15px; border-radius: 5px; font-family: monospace; font-size: 0.9rem;">
            <p><strong>Core Payment Class:</strong></p>
            <pre>
public class CommonPayment {
    private String paymentId;          // Unique payment identifier
    private String correlationId;      // End-to-end correlation ID
    private PaymentType type;          // Enum: CREDIT_TRANSFER, DIRECT_DEBIT, etc.
    private PaymentScheme scheme;      // Enum: SEPA, SWIFT, ACH, etc.
    private PaymentStatus status;      // Enum: RECEIVED, VALIDATED, PROCESSED, etc.
    private BigDecimal amount;         // Payment amount
    private String currency;           // ISO currency code
    private LocalDateTime initiationDate;
    private LocalDateTime executionDate;
    private Party debtor;             // Debtor information
    private Party creditor;           // Creditor information
    private PaymentPurpose purpose;   // Purpose code and description
    private List&lt;PaymentInstruction&gt; instructions;
    private List&lt;PaymentFee&gt; fees;
    private List&lt;PaymentTax&gt; taxes;
    private Map&lt;String, String&gt; customAttributes; // For payment-type specific fields

    // Common validation methods
    public ValidationResult validate() { /* ... */ }

    // Common enrichment methods
    public void enrich(ReferenceDataService referenceData) { /* ... */ }

    // Common routing methods
    public RoutingDecision route(RoutingRules rules) { /* ... */ }
}</pre>

            <p style="margin-top: 15px;"><strong>Party Information Class:</strong></p>
            <pre>
public class Party {
    private String id;
    private String name;
    private String accountNumber;
    private String bankId;       // BIC, ABA, Sort Code, etc.
    private String bankName;
    private Address address;
    private List&lt;PartyIdentifier&gt; additionalIds; // LEI, Tax ID, etc.

    public boolean validate() { /* ... */ }
}</pre>

            <p style="margin-top: 15px;"><strong>Transformation Interface:</strong></p>
            <pre>
public interface PaymentTransformer {
    CommonPayment toCommonPayment(InputFormat input) throws TransformationException;
    OutputFormat fromCommonPayment(CommonPayment payment) throws TransformationException;
}</pre>
        </div>

        <h5 style="margin-top: 20px;"><i class="fas fa-exchange-alt"></i> Transformation Components</h5>
        <p>Each payment format has its own transformer implementation:</p>

        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 15px; margin-top: 15px;">
            <div class="architecture-card" style="margin: 0;">
                <h6><i class="fas fa-euro-sign"></i> SEPA Transformer</h6>
                <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                    <li>PAIN.001 to CommonPayment</li>
                    <li>CommonPayment to PAIN.002</li>
                    <li>SEPA-specific validation rules</li>
                    <li>IBAN validation</li>
                </ul>
            </div>

            <div class="architecture-card" style="margin: 0;">
                <h6><i class="fas fa-globe"></i> SWIFT Transformer</h6>
                <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                    <li>MT103 to CommonPayment</li>
                    <li>CommonPayment to MT103</li>
                    <li>SWIFT-specific field mapping</li>
                    <li>BIC validation</li>
                </ul>
            </div>

            <div class="architecture-card" style="margin: 0;">
                <h6><i class="fas fa-dollar-sign"></i> ACH Transformer</h6>
                <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                    <li>NACHA to CommonPayment</li>
                    <li>CommonPayment to NACHA</li>
                    <li>ACH-specific validation</li>
                    <li>ABA routing number validation</li>
                </ul>
            </div>

            <div class="architecture-card" style="margin: 0;">
                <h6><i class="fas fa-file-code"></i> ISO 20022 Transformer</h6>
                <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                    <li>XML to CommonPayment</li>
                    <li>CommonPayment to XML</li>
                    <li>ISO 20022 schema validation</li>
                    <li>Rich data field mapping</li>
                </ul>
            </div>
        </div>

        <h5 style="margin-top: 20px;"><i class="fas fa-cogs"></i> Validation and Processing</h5>
        <p>The CDM enables common validation and processing across all payment types:</p>

        <div style="margin-top: 15px; background: #f8f9fa; padding: 15px; border-radius: 5px;">
            <p><strong>Common Validation Rules:</strong></p>
            <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                <li>Mandatory field checks</li>
                <li>Amount validation (positive, precision)</li>
                <li>Currency code validation</li>
                <li>Date validation (not in past/future)</li>
                <li>Party information validation</li>
                <li>Payment-type specific rules</li>
            </ul>

            <p style="margin-top: 15px;"><strong>Common Processing Components:</strong></p>
            <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                <li><strong>Fraud Detection:</strong> Common patterns across all payment types</li>
                <li><strong>Compliance Checks:</strong> Sanctions screening, AML checks</li>
                <li><strong>Limit Validation:</strong> Transaction amount limits</li>
                <li><strong>Fee Calculation:</strong> Standard fee structures</li>
                <li><strong>Routing Rules:</strong> Destination determination</li>
                <li><strong>Audit Logging:</strong> Standardized audit trail</li>
            </ul>
        </div>
    </div>

    <div class="architecture-card" style="grid-column: 1 / -1; margin-top: 20px;">
        <h4><i class="fas fa-check-circle"></i> CDM Benefits and Implementation Considerations</h4>

        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-top: 15px;">
            <div>
                <h5><i class="fas fa-thumbs-up"></i> Advantages</h5>
                <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                    <li><strong>Consistent Processing:</strong> Uniform handling of all payment types</li>
                    <li><strong>Reduced Complexity:</strong> Single model instead of multiple format-specific processors</li>
                    <li><strong>Easier Maintenance:</strong> Changes applied once to the common model</li>
                    <li><strong>Better Validation:</strong> Comprehensive validation rules in one place</li>
                    <li><strong>Improved Routing:</strong> Standardized routing logic</li>
                    <li><strong>Enhanced Auditability:</strong> Consistent audit trail format</li>
                    <li><strong>Faster Onboarding:</strong> New payment types easier to add</li>
                </ul>
            </div>

            <div>
                <h5><i class="fas fa-exclamation-triangle"></i> Challenges</h5>
                <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                    <li><strong>Initial Complexity:</strong> Requires careful design upfront</li>
                    <li><strong>Format Variations:</strong> Some payment types have unique requirements</li>
                    <li><strong>Performance Overhead:</strong> Transformation adds processing steps</li>
                    <li><strong>Schema Evolution:</strong> Need to handle model changes over time</li>
                    <li><strong>Legacy Integration:</strong> Some old systems may not fit cleanly</li>
                </ul>
            </div>

            <div>
                <h5><i class="fas fa-lightbulb"></i> Best Practices</h5>
                <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                    <li><strong>Start Simple:</strong> Begin with core fields, extend as needed</li>
                    <li><strong>Versioning:</strong> Implement model versioning for backward compatibility</li>
                    <li><strong>Extensibility:</strong> Design for easy extension with custom fields</li>
                    <li><strong>Performance Testing:</strong> Validate transformation performance</li>
                    <li><strong>Documentation:</strong> Clear documentation of model and transformations</li>
                    <li><strong>Validation Layers:</strong> Multiple validation levels (syntax, business rules)</li>
                </ul>
            </div>
        </div>

        <h5 style="margin-top: 20px;"><i class="fas fa-project-diagram"></i> Implementation Roadmap</h5>
        <ol style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
            <li><strong>Phase 1 - Design:</strong> Define core model structure and transformation interfaces</li>
            <li><strong>Phase 2 - Core Implementation:</strong> Implement basic model and common validation</li>
            <li><strong>Phase 3 - Format Transformers:</strong> Develop transformers for 2-3 key payment types</li>
            <li><strong>Phase 4 - Processing Integration:</strong> Connect to fraud, compliance, and routing components</li>
            <li><strong>Phase 5 - Testing:</strong> Validate with sample payments and edge cases</li>
            <li><strong>Phase 6 - Rollout:</strong> Gradually migrate payment types to use CDM</li>
            <li><strong>Phase 7 - Optimization:</strong> Refine model and transformations based on production data</li>
        </ol>

        <h5 style="margin-top: 20px;"><i class="fas fa-code"></i> Sample Implementation Code</h5>
        <div style="margin-top: 15px; background: #f8f9fa; padding: 15px; border-radius: 5px; font-family: monospace; font-size: 0.9rem;">
            <p><strong>SEPA to CDM Transformation Example:</strong></p>
            <pre>
public class SepaPain001Transformer implements PaymentTransformer {
    public CommonPayment toCommonPayment(Document pain001Document) {
        CommonPayment payment = new CommonPayment();

        // Extract basic payment information
        payment.setPaymentId(getPaymentId(pain001Document));
        payment.setCorrelationId(getEndToEndId(pain001Document));
        payment.setType(PaymentType.CREDIT_TRANSFER);
        payment.setScheme(PaymentScheme.SEPA);
        payment.setAmount(getAmount(pain001Document));
        payment.setCurrency(getCurrency(pain001Document));
        payment.setInitiationDate(getCreationDate(pain001Document));
        payment.setExecutionDate(getRequestedExecutionDate(pain001Document));

        // Extract debtor and creditor information
        payment.setDebtor(extractDebtor(pain001Document));
        payment.setCreditor(extractCreditor(pain001Document));

        // Extract payment purpose
        payment.setPurpose(extractPurpose(pain001Document));

        // Add SEPA-specific attributes to custom fields
        Map&lt;String, String&gt; sepaAttributes = new HashMap<>();
        sepaAttributes.put("sepa.serviceLevel", getServiceLevel(pain001Document));
        sepaAttributes.put("sepa.localInstrument", getLocalInstrument(pain001Document));
        payment.setCustomAttributes(sepaAttributes);

        return payment;
    }

    // Helper methods for extracting SEPA-specific fields
    // ...
}</pre>
        </div>
    </div>
</div>

	</section>


<!-- Migration -->
<!-- Migration -->
<section id="migration" class="tab-content">
    <h2><i class="fas fa-exchange-alt"></i> AI-Augmented Migration Strategy</h2>
    <div class="architecture-diagram">
        <div class="diagram-header">
            <h3>Phased Migration from Tibco BW5 to Cloud-Native Platform with AI Analysis (Sep 2025 - Sep 2026)</h3>
            <div class="diagram-actions">
                <button class="btn btn-primary" onclick="zoomIn('migrationDiagram')"><i class="fas fa-search-plus"></i> Zoom</button>
                <button class="btn btn-outline" onclick="resetZoom('migrationDiagram')"><i class="fas fa-sync"></i> Reset</button>
            </div>
        </div>
        <div class="mermaid" id="migrationDiagram">
            gantt
                title Migration Timeline with AI Analysis Phase
                dateFormat  YYYY-MM-DD
                section 0. AI-Assisted Analysis (Sep-Oct 2025)
                Code Repository Setup         :a0, 2025-09-01, 7d
                AI Model Training             :a1, after a0, 14d
                Code Analysis Execution       :a2, after a1, 14d
                Analysis Validation           :a3, after a2, 7d
                Migration Plan Finalization   :a4, after a3, 7d

                section 1. Platform Construction (Oct-Nov 2025)
                Target Architecture Design      :a5, after a4, 14d
                Kubernetes Setup               :a6, after a5, 14d
                Monitoring Infrastructure      :a7, after a5, 14d
                CI/CD Pipeline Setup           :a8, after a5, 14d
                Security Framework             :a9, after a5, 14d

                section 2. Framework Development (Nov-Dec 2025)
                Core Integration Framework      :b1, after a6 a7 a8 a9, 21d
                Basic Connectors               :b2, after b1, 21d
                Logging & Error Handling       :b3, after b1, 21d
                Dynamic Router                 :b4, after b1, 21d
                Framework Validation App       :b5, after b2 b3 b4, 14d

                section 3. Framework Validation (Dec 2025 - Jan 2026)
                Test Flows Deployment          :c1, after b5, 14d
                Performance Testing             :c2, after c1, 14d
                Security Validation            :c3, after c1, 14d
                Framework Tuning               :c4, after c2 c3, 14d

                section 4. Payment Processing Development (Jan-Feb 2026)
                Basic Payment Kamelets         :d1, after c4, 21d
                Payment Routing Components     :d2, after d1, 21d
                SEPA Example Implementation     :d3, after d1, 14d

                section 5. Complex Payment Development (Feb-Mar 2026)
                SWIFT Processing Kamelets      :e1, after d2 d3, 21d
                Real-Time Payment Adapters    :e2, after e1, 21d
                Legacy System Connectors       :e3, after e1, 21d
                Complex Validation Rules       :e4, after e2 e3, 14d

                section 6. Gradual Payment Migration (Mar-Aug 2026)
                Domestic Payments Migration    :f1, after e4, 30d
                Regional Payments Migration    :f2, after f1, 30d
                International Payments        :f3, after f2, 30d
                Real-Time Payments             :f4, after f3, 30d
                Legacy Payments                :f5, after f4, 30d

                section 7. Finalization (Aug-Sep 2026)
                Tibco Decommissioning          :g1, after f5, 14d
                Final Performance Tuning       :g2, after g1, 14d
                Documentation & Training        :g3, after g1, 14d
                Go-Live Preparation            :g4, after g2 g3, 14d
        </div>
    </div>

    <!-- AI-Assisted Analysis Phase -->
    <div class="component-details">
        <h3><i class="fas fa-robot"></i> Phase 0: AI-Assisted Code Analysis (Sep-Oct 2025)</h3>

        <div class="architecture-card" style="grid-column: 1 / -1;">
            <h4><i class="fas fa-search"></i> AI Analysis Overview</h4>
            <p>Leverage AI-powered code analysis to automatically identify business logic, transformations, and routing rules in the existing Tibco BW5 codebase:</p>

            <div class="mermaid" style="margin-top: 20px; text-align: center;">
                graph TD
                    %% AI Analysis Workflow
                    subgraph AI_Analysis["AI-Assisted Analysis Process"]
                        direction TB
                        CodeRepo[Tibco BW5 Code Repository]
                        AITraining[AI Model Training]
                        CodeScanning[Code Pattern Scanning]
                        LogicExtraction[Business Logic Extraction]
                        TransformIdent[Transformation Identification]
                        RouteIdent[Routing Rule Identification]
                        DependencyMap[Dependency Mapping]
                        ReportGen[Analysis Report Generation]
                        Validation[Human Validation]
                        MigrationPlan[Migration Plan Finalization]
                    end

                    %% Connections
                    CodeRepo --> AITraining
                    CodeRepo --> CodeScanning
                    AITraining --> CodeScanning
                    CodeScanning --> LogicExtraction
                    CodeScanning --> TransformIdent
                    CodeScanning --> RouteIdent
                    CodeScanning --> DependencyMap
                    LogicExtraction --> ReportGen
                    TransformIdent --> ReportGen
                    RouteIdent --> ReportGen
                    DependencyMap --> ReportGen
                    ReportGen --> Validation
                    Validation --> MigrationPlan

                    %% Styling
                    classDef ai fill:#673AB7,stroke:#5E35B1,color:white
                    class CodeScanning,LogicExtraction,TransformIdent,RouteIdent,DependencyMap,ReportGen ai
            </div>

            <p style="margin-top: 15px;"><strong>Analysis Goals:</strong></p>
            <ul style="margin-top: 10px; padding-left: 20px;">
                <li>Identify all business logic components in Tibco BW5 processes</li>
                <li>Extract transformation rules between different payment formats</li>
                <li>Map routing decisions and their conditions</li>
                <li>Discover dependencies between different components</li>
                <li>Identify data models and their relationships</li>
                <li>Find error handling and recovery patterns</li>
                <li>Document integration points with external systems</li>
            </ul>
        </div>

        <div class="architecture-card" style="grid-column: 1 / -1; margin-top: 20px;">
            <h4><i class="fas fa-cogs"></i> Step-by-Step AI Analysis Process</h4>

            <div class="architecture-grid" style="grid-template-columns: 1fr; margin-top: 15px;">
                <div class="architecture-card" style="margin-bottom: 15px;">
                    <h5><i class="fas fa-code-branch"></i> Step 1: Code Repository Preparation</h5>
                    <p>Prepare the Tibco BW5 codebase for AI analysis:</p>
                    <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                        <li>Extract complete Tibco BW5 codebase from version control</li>
                        <li>Organize code by functional areas (payment processing, transformations, routing)</li>
                        <li>Remove sensitive information while preserving structure</li>
                        <li>Create code documentation and structure maps</li>
                        <li>Set up code analysis environment with proper access controls</li>
                        <li>Define analysis scope and exclusion patterns</li>
                    </ul>
                </div>

                <div class="architecture-card" style="margin-bottom: 15px;">
                    <h5><i class="fas fa-brain"></i> Step 2: AI Model Training</h5>
                    <p>Train AI models on Tibco BW5 patterns and financial services domain knowledge:</p>
                    <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                        <li>Select appropriate AI/ML models for code analysis (e.g., CodeBERT, CodeGPT)</li>
                        <li>Train models on Tibco BW5 specific patterns and constructs</li>
                        <li>Incorporate financial services domain knowledge (payment formats, routing rules)</li>
                        <li>Create custom patterns for business logic identification</li>
                        <li>Develop transformation rule detection algorithms</li>
                        <li>Train routing rule identification models</li>
                        <li>Validate model accuracy with sample code</li>
                    </ul>
                </div>

                <div class="architecture-card" style="margin-bottom: 15px;">
                    <h5><i class="fas fa-search"></i> Step 3: Code Pattern Scanning</h5>
                    <p>Execute AI-powered scanning of the Tibco BW5 codebase:</p>
                    <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                        <li>Run AI models against the complete codebase</li>
                        <li>Identify business logic components and their dependencies</li>
                        <li>Extract transformation rules between payment formats</li>
                        <li>Detect routing decision points and conditions</li>
                        <li>Map data flows between components</li>
                        <li>Identify error handling and recovery patterns</li>
                        <li>Document external system integration points</li>
                        <li>Generate initial analysis reports</li>
                    </ul>
                </div>

                <div class="architecture-card" style="margin-bottom: 15px;">
                    <h5><i class="fas fa-project-diagram"></i> Step 4: Business Logic Extraction</h5>
                    <p>Extract and document business logic components:</p>
                    <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                        <li>Identify core business logic for payment processing</li>
                        <li>Extract validation rules for different payment types</li>
                        <li>Document business rule implementations</li>
                        <li>Map logic components to business capabilities</li>
                        <li>Identify reusable logic patterns</li>
                        <li>Document logic dependencies and interactions</li>
                        <li>Create business logic inventory</li>
                    </ul>
                </div>

                <div class="architecture-card" style="margin-bottom: 15px;">
                    <h5><i class="fas fa-exchange-alt"></i> Step 5: Transformation Rule Identification</h5>
                    <p>Identify and document transformation rules:</p>
                    <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                        <li>Map transformations between payment formats (SEPA→SWIFT, ACH→ISO20022)</li>
                        <li>Identify data mapping rules and field conversions</li>
                        <li>Document format-specific validation rules</li>
                        <li>Extract transformation business logic</li>
                        <li>Identify common transformation patterns</li>
                        <li>Document transformation dependencies</li>
                        <li>Create transformation rule catalog</li>
                    </ul>
                </div>

                <div class="architecture-card" style="margin-bottom: 15px;">
                    <h5><i class="fas fa-route"></i> Step 6: Routing Rule Identification</h5>
                    <p>Extract and document routing rules and decisions:</p>
                    <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                        <li>Identify routing decision points in the code</li>
                        <li>Extract routing conditions and rules</li>
                        <li>Document routing logic for different payment types</li>
                        <li>Map routing dependencies and interactions</li>
                        <li>Identify dynamic routing patterns</li>
                        <li>Document routing error handling</li>
                        <li>Create routing rule inventory</li>
                    </ul>
                </div>

                <div class="architecture-card" style="margin-bottom: 15px;">
                    <h5><i class="fas fa-sitemap"></i> Step 7: Dependency Mapping</h5>
                    <p>Create comprehensive dependency maps:</p>
                    <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                        <li>Map dependencies between business logic components</li>
                        <li>Document transformation rule dependencies</li>
                        <li>Map routing rule dependencies</li>
                        <li>Identify external system dependencies</li>
                        <li>Document data flow dependencies</li>
                        <li>Create component interaction diagrams</li>
                        <li>Identify critical path dependencies</li>
                    </ul>
                </div>

                <div class="architecture-card" style="margin-bottom: 15px;">
                    <h5><i class="fas fa-file-alt"></i> Step 8: Analysis Report Generation</h5>
                    <p>Generate comprehensive analysis reports:</p>
                    <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                        <li>Create business logic inventory report</li>
                        <li>Generate transformation rule catalog</li>
                        <li>Produces routing rule documentation</li>
                        <li>Create dependency maps and diagrams</li>
                        <li>Generate data flow documentation</li>
                        <li>Produces error handling pattern analysis</li>
                        <li>Create external integration points report</li>
                    </ul>
                </div>

                <div class="architecture-card" style="margin-bottom: 15px;">
                    <h5><i class="fas fa-check-circle"></i> Step 9: Human Validation</h5>
                    <p>Validate AI analysis results with domain experts:</p>
                    <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                        <li>Review business logic identification with business analysts</li>
                        <li>Validate transformation rules with payment experts</li>
                        <li>Confirm routing rules with operations team</li>
                        <li>Verify dependency maps with architects</li>
                        <li>Validate error handling patterns with support team</li>
                        <li>Confirm external integration points with integration specialists</li>
                        <li>Document validation results and adjustments</li>
                    </ul>
                </div>

                <div class="architecture-card" style="margin-bottom: 0;">
                    <h5><i class="fas fa-road"></i> Step 10: Migration Plan Finalization</h5>
                    <p>Develop the final migration plan based on analysis results:</p>
                    <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                        <li>Prioritize components based on dependencies and complexity</li>
                        <li>Define migration phases and milestones</li>
                        <li>Identify reusable components for the new platform</li>
                        <li>Document components that need redesign</li>
                        <li>Create test plan based on identified components</li>
                        <li>Develop risk mitigation strategies</li>
                        <li>Finalize migration timeline and resource plan</li>
                    </ul>
                </div>
            </div>
        </div>

        <div class="architecture-card" style="grid-column: 1 / -1; margin-top: 20px;">
            <h4><i class="fas fa-tools"></i> AI Analysis Tools and Techniques</h4>

            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-top: 15px;">
                <div>
                    <h5><i class="fas fa-robot"></i> AI/ML Models</h5>
                    <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                        <li><strong>CodeBERT:</strong> Transformer model for code understanding</li>
                        <li><strong>CodeGPT:</strong> GPT-based model for code analysis</li>
                        <li><strong>Tree-sitter:</strong> Parsing and analyzing code structure</li>
                        <li><strong>Custom Models:</strong> Trained on Tibco BW5 patterns</li>
                        <li><strong>NLP Models:</strong> For extracting business rules from comments</li>
                    </ul>
                </div>

                <div>
                    <h5><i class="fas fa-code"></i> Code Analysis Techniques</h5>
                    <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                        <li><strong>Abstract Syntax Tree:</strong> Analysis of code structure</li>
                        <li><strong>Control Flow Analysis:</strong> Identifying execution paths</li>
                        <li><strong>Data Flow Analysis:</strong> Tracking data through the system</li>
                        <li><strong>Pattern Matching:</strong> Identifying common patterns</li>
                        <li><strong>Dependency Graph:</strong> Mapping component relationships</li>
                    </ul>
                </div>

                <div>
                    <h5><i class="fas fa-chart-pie"></i> Analysis Focus Areas</h5>
                    <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                        <li><strong>Business Logic:</strong> Core payment processing rules</li>
                        <li><strong>Transformations:</strong> Format conversions and mappings</li>
                        <li><strong>Routing Rules:</strong> Payment destination decisions</li>
                        <li><strong>Error Handling:</strong> Recovery and retry patterns</li>
                        <li><strong>External Integrations:</strong> Connections to other systems</li>
                        <li><strong>Data Models:</strong> Payment data structures</li>
                    </ul>
                </div>
            </div>

            <h5 style="margin-top: 20px;"><i class="fas fa-file-code"></i> Sample Analysis Output</h5>
            <div style="margin-top: 15px; background: #f8f9fa; padding: 15px; border-radius: 5px; font-family: monospace; font-size: 0.9rem;">
                <p><strong>Business Logic Identification Example:</strong></p>
                <pre>
{
  "component": "PaymentValidationBW",
  "type": "BusinessLogic",
  "description": "Validates SEPA payment instructions",
  "functions": [
    {
      "name": "validateAccountNumber",
      "description": "Validates IBAN format and checksum",
      "parameters": ["accountNumber"],
      "dependencies": ["IBANUtils"],
      "codeLocation": "com.tibco.payment.validation.IBANValidator.java:42"
    },
    {
      "name": "checkAmountLimits",
      "description": "Validates amount against daily limits",
      "parameters": ["amount", "customerId"],
      "dependencies": ["LimitService", "CustomerProfile"],
      "codeLocation": "com.tibco.payment.validation.AmountValidator.java:112"
    },
    {
      "name": "validateCurrency",
      "description": "Ensures currency is supported",
      "parameters": ["currencyCode"],
      "dependencies": ["CurrencyService"],
      "codeLocation": "com.tibco.payment.validation.CurrencyValidator.java:78"
    }
  ],
  "dataFlows": [
    {
      "source": "SEPA_Input",
      "target": "ValidationResult",
      "transformation": "SEPA_to_Internal",
      "codeLocation": "com.tibco.payment.routes.SEPARoute.java:145"
    }
  ],
  "routingRules": [
    {
      "condition": "amount > 10000",
      "action": "routeToManualReview",
      "codeLocation": "com.tibco.payment.routing.HighValueRouter.java:89"
    }
  ],
  "externalDependencies": [
    {
      "system": "CustomerProfileService",
      "purpose": "Retrieve customer limits",
      "interface": "REST",
      "codeLocation": "com.tibco.integration.CustomerProfileClient.java:32"
    }
  ],
  "relatedComponents": [
    "SEPAParser",
    "LimitService",
    "FraudDetectionEngine"
  ]
}</pre>
            </div>
        </div>

        <div class="architecture-card" style="grid-column: 1 / -1; margin-top: 20px;">
            <h4><i class="fas fa-balance-scale"></i> AI Analysis Benefits and Implementation</h4>

            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-top: 15px;">
                <div>
                    <h5><i class="fas fa-thumbs-up"></i> Advantages</h5>
                    <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                        <li><strong>Faster Analysis:</strong> Accelerates understanding of complex Tibco BW5 codebase</li>
                        <li><strong>Comprehensive Coverage:</strong> Identifies patterns across entire codebase systematically</li>
                        <li><strong>Consistent Results:</strong> Reduces human bias in component identification</li>
                        <li><strong>Dependency Mapping:</strong> Automatically discovers component relationships</li>
                        <li><strong>Pattern Recognition:</strong> Identifies common patterns and anti-patterns</li>
                        <li><strong>Documentation Generation:</strong> Automatically creates structured documentation</li>
                        <li><strong>Risk Identification:</strong> Highlights potential migration risks early</li>
                        <li><strong>Effort Estimation:</strong> Provides data for more accurate planning</li>
                    </ul>
                </div>

                <div>
                    <h5><i class="fas fa-exclamation-triangle"></i> Implementation Considerations</h5>
                    <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                        <li><strong>Model Training:</strong> Requires quality training data and Tibco BW5 expertise</li>
                        <li><strong>Validation Needed:</strong> Human review required to validate AI findings</li>
                        <li><strong>Complex Logic:</strong> May need manual analysis for very complex business rules</li>
                        <li><strong>Tool Integration:</strong> Combine with existing code analysis tools</li>
                        <li><strong>Incremental Approach:</strong> Start with critical components first</li>
                        <li><strong>Domain Expertise:</strong> Requires financial services knowledge for validation</li>
                        <li><strong>Performance Impact:</strong> Consider analysis performance on large codebases</li>
                    </ul>
                </div>

                <div>
                    <h5><i class="fas fa-lightbulb"></i> Best Practices</h5>
                    <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                        <li><strong>Pilot First:</strong> Test on a subset of critical components</li>
                        <li><strong>Combine Approaches:</strong> Use AI with manual review for validation</li>
                        <li><strong>Iterative Refinement:</strong> Improve models based on feedback</li>
                        <li><strong>Focus Areas:</strong> Prioritize analysis on most complex components</li>
                        <li><strong>Document Assumptions:</strong> Clearly document AI findings and limitations</li>
                        <li><strong>Validation Process:</strong> Establish clear validation criteria with domain experts</li>
                        <li><strong>Tool Integration:</strong> Combine with static analysis and profiling tools</li>
                    </ul>
                </div>
            </div>

            <h5 style="margin-top: 20px;"><i class="fas fa-project-diagram"></i> Integration with Migration Process</h5>
            <p>How AI analysis feeds into each migration phase:</p>

            <div style="margin-top: 15px;">
                <h6><i class="fas fa-server"></i> Platform Construction:</h6>
                <ul style="margin-top: 5px; padding-left: 20px; font-size: 0.9rem;">
                    <li>Use dependency maps to design optimal Kubernetes architecture</li>
                    <li>Configure monitoring based on identified critical components</li>
                    <li>Set up CI/CD pipelines optimized for component structure</li>
                </ul>

                <h6 style="margin-top: 10px;"><i class="fas fa-cogs"></i> Framework Development:</h6>
                <ul style="margin-top: 5px; padding-left: 20px; font-size: 0.9rem;">
                    <li>Implement framework components based on identified business logic patterns</li>
                    <li>Develop connectors for all external systems found in analysis</li>
                    <li>Create logging structure matching identified data flows</li>
                </ul>

                <h6 style="margin-top: 10px;"><i class="fas fa-credit-card"></i> Payment Processing:</h6>
                <ul style="margin-top: 5px; padding-left: 20px; font-size: 0.9rem;">
                    <li>Develop payment kamelets using extracted transformation rules</li>
                    <li>Implement routing components based on identified routing logic</li>
                    <li>Create validation rules from analyzed business logic</li>
                </ul>

                <h6 style="margin-top: 10px;"><i class="fas fa-exchange-alt"></i> Gradual Migration:</h6>
                <ul style="margin-top: 5px; padding-left: 20px; font-size: 0.9rem;">
                    <li>Use dependency maps to determine optimal migration order</li>
                    <li>Prioritize components based on complexity identified in analysis</li>
                    <li>Validate migration results against AI-identified patterns</li>
                </ul>
            </div>
        </div>
    </div>

    <!-- Migration Phases -->
    <div class="architecture-grid">
        <!-- Phase 1: Platform Construction -->
        <div class="architecture-card">
            <h4><i class="fas fa-server"></i> Phase 1: Platform Construction (Oct-Nov 2025)</h4>
            <p>Build the foundational cloud-native platform using insights from AI analysis:</p>
            <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                <li>Design target architecture accommodating identified patterns from AI analysis</li>
                <li>Set up Kubernetes cluster with proper networking and storage based on dependency maps</li>
                <li>Implement monitoring infrastructure for components identified as critical</li>
                <li>Establish CI/CD pipelines optimized for the identified component structure</li>
                <li>Configure security framework addressing vulnerabilities found during analysis</li>
                <li>Define operational procedures based on component interaction patterns</li>
            </ul>
            <div class="tech-pill pill-kubernetes">Kubernetes</div>
            <div class="tech-pill pill-cicd">ArgoCD</div>
            <div class="tech-pill pill-monitoring">Prometheus</div>
        </div>

        <!-- Phase 2: Framework Development -->
        <div class="architecture-card">
            <h4><i class="fas fa-cogs"></i> Phase 2: Framework Development (Nov-Dec 2025)</h4>
            <p>Develop the core integration framework with reusable components based on AI findings:</p>
            <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                <li>Implement core integration framework with Camel K using patterns identified by AI</li>
                <li>Develop basic connectors for all external systems found in the analysis</li>
                <li>Create logging and error handling components based on identified error patterns</li>
                <li>Build dynamic router using the routing rules extracted by AI analysis</li>
                <li>Develop framework validation application to test all identified components</li>
                <li>Implement health checks and metrics collection for all critical components</li>
            </ul>
            <div class="tech-pill pill-camel">Camel K</div>
            <div class="tech-pill pill-kafka">Kafka</div>
            <div class="tech-pill pill-postgres">PostgreSQL</div>
        </div>

        <!-- Phase 3: Framework Validation -->
        <div class="architecture-card">
            <h4><i class="fas fa-vial"></i> Phase 3: Framework Validation (Dec 2025 - Jan 2026)</h4>
            <p>Validate the framework with test flows based on AI-identified patterns:</p>
            <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                <li>Deploy test flows that exercise all components identified by AI analysis</li>
                <li>Conduct performance testing focusing on critical paths discovered during analysis</li>
                <li>Perform security validation on components flagged as high-risk by AI</li>
                <li>Tune framework based on test results and performance patterns identified</li>
                <li>Establish performance benchmarks for different payment types based on analysis</li>
                <li>Document framework capabilities and limitations discovered through analysis</li>
            </ul>
            <div class="tech-pill pill-camel">Camel K</div>
            <div class="tech-pill pill-kubernetes">Prometheus</div>
        </div>

        <!-- Phase 4: Payment Processing Development -->
        <div class="architecture-card">
            <h4><i class="fas fa-credit-card"></i> Phase 4: Payment Processing Development (Jan-Feb 2026)</h4>
            <p>Develop basic payment processing components using AI-extracted patterns:</p>
            <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                <li>Implement basic payment Kamelets for SEPA and ACH using transformation rules identified by AI</li>
                <li>Develop payment routing components based on routing logic extracted from code</li>
                <li>Create format transformation components using the mapping patterns discovered</li>
                <li>Build SEPA example implementation as reference using the most common patterns found</li>
                <li>Implement validation rules based on the business logic identified in existing code</li>
                <li>Create error handling mechanisms using the error patterns discovered by AI</li>
            </ul>
            <div class="tech-pill pill-camel">Camel K</div>
            <div class="tech-pill pill-quarkus">Quarkus</div>
        </div>

        <!-- Phase 5: Complex Payment Development -->
        <div class="architecture-card">
            <h4><i class="fas fa-globe"></i> Phase 5: Complex Payment Development (Feb-Mar 2026)</h4>
            <p>Develop advanced payment processing components for complex scenarios identified by AI:</p>
            <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                <li>Implement SWIFT processing Kamelets for MT103 and MX using the complex transformation rules identified</li>
                <li>Develop real-time payment adapters for RTP, UPI, and PIX based on the specific patterns found</li>
                <li>Create legacy system connectors for COBOL and EDI using the legacy integration points discovered</li>
                <li>Build complex validation rules including sanctions screening and AML checks as identified</li>
                <li>Implement advanced error handling with DLQ and circuit breakers for the critical components flagged</li>
                <li>Develop comprehensive testing frameworks covering all the edge cases discovered</li>
            </ul>
            <div class="tech-pill pill-camel">Camel K</div>
            <div class="tech-pill pill-quarkus">Quarkus</div>
        </div>

        <!-- Phase 6: Gradual Payment Migration -->
        <div class="architecture-card">
            <h4><i class="fas fa-exchange-alt"></i> Phase 6: Gradual Payment Migration (Mar-Aug 2026)</h4>
            <p>Migrate payment types in logical phases using dependency maps from AI analysis:</p>
            <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                <li>Migrate domestic payments (ACH, BACS, Faster Payments) starting with the least complex</li>
                <li>Transition regional payments (SEPA, TARGET2) using the identified dependency order</li>
                <li>Handle international payments (SWIFT) with special attention to complex routing rules found</li>
                <li>Implement real-time payments (RTP, UPI, PIX) using the performance patterns identified</li>
                <li>Migrate legacy payments (COBOL, EDI) with careful validation of transformation rules</li>
                <li>Continuous performance tuning based on the optimization opportunities discovered</li>
            </ul>
            <div class="tech-pill pill-camel">Camel K</div>
            <div class="tech-pill pill-quarkus">Quarkus</div>
        </div>

        <!-- Phase 7: Finalization -->
        <div class="architecture-card">
            <h4><i class="fas fa-flag-checkered"></i> Phase 7: Finalization (Aug-Sep 2026)</h4>
            <p>Complete the migration and finalize the platform:</p>
            <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                <li>Final validation of all migrated components against the AI-generated component inventory</li>
                <li>Complete cutover from Tibco BW5 to the new platform using the migration sequence determined by AI</li>
                <li>Decommission Tibco BW5 environment after validating all components are properly migrated</li>
                <li>Final performance tuning focusing on the critical paths identified during analysis</li>
                <li>Complete all documentation incorporating the insights gained from AI analysis</li>
                <li>Conduct final go-live preparation and testing based on the risk assessment from AI</li>
            </ul>
            <div class="tech-pill pill-kubernetes">Kubernetes</div>
            <div class="tech-pill pill-cicd">ArgoCD</div>
        </div>
    </div>

    <div class="component-details">
        <h3><i class="fas fa-project-diagram"></i> Migration Methodology with AI Integration</h3>

        <div class="architecture-card" style="grid-column: 1 / -1;">
            <h4><i class="fas fa-cogs"></i> AI-Augmented Migration Approach</h4>
            <p>The migration follows a structured 7-phase approach with AI-assisted analysis providing critical insights:</p>

            <div style="margin-top: 20px;">
                <h5><i class="fas fa-robot"></i> Phase 0: AI-Assisted Analysis (Sep-Oct 2025)</h5>
                <p>Comprehensive AI-powered analysis of the existing Tibco BW5 codebase:</p>
                <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                    <li><strong>Code Repository Preparation:</strong> Organize and prepare the Tibco BW5 codebase for analysis</li>
                    <li><strong>AI Model Training:</strong> Train models on Tibco BW5 patterns and financial services domain knowledge</li>
                    <li><strong>Code Pattern Scanning:</strong> Execute AI-powered scanning to identify components and patterns</li>
                    <li><strong>Component Extraction:</strong> Extract business logic, transformations, and routing rules</li>
                    <li><strong>Dependency Mapping:</strong> Create comprehensive maps of component relationships</li>
                    <li><strong>Report Generation:</strong> Produce structured analysis reports and visualizations</li>
                    <li><strong>Human Validation:</strong> Review and validate AI findings with domain experts</li>
                    <li><strong>Migration Planning:</strong> Finalize migration plan based on analysis results</li>
                </ul>

                <div class="mermaid" style="margin-top: 20px; text-align: center;">
                    graph LR
                        subgraph AI_Analysis["AI Analysis Results"]
                            direction TB
                            Logic[Business Logic\n124 Components]
                            Transform[Transformation Rules\n87 Mappings]
                            Route[Routing Rules\n42 Conditions]
                            Deps[Dependencies\n214 Relationships]
                            Errors[Error Patterns\n38 Types]
                            External[External Integrations\n19 Systems]
                        end

                        subgraph Migration_Planning["Migration Planning"]
                            direction TB
                            Phases[Migration Phases]
                            Sequence[Migration Sequence]
                            Risks[Risk Assessment]
                            Resources[Resource Plan]
                            Timeline[Detailed Timeline]
                        end

                        AI_Analysis --> Migration_Planning

                        style AI_Analysis fill:#673AB7,stroke:#5E35B1,color:white
                        style Migration_Planning fill:#4CAF50,stroke:#388E3C,color:white
                </div>

                <h5 style="margin-top: 20px;"><i class="fas fa-server"></i> Phase 1: Platform Construction (Oct-Nov 2025)</h5>
                <p>Build the foundational cloud-native platform using insights from AI analysis:</p>
                <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                    <li><strong>Target Architecture Design:</strong> Design architecture accommodating patterns identified by AI</li>
                    <li><strong>Kubernetes Setup:</strong> Configure cluster based on dependency maps from analysis</li>
                    <li><strong>Monitoring Infrastructure:</strong> Implement monitoring for critical components identified</li>
                    <li><strong>CI/CD Pipeline Setup:</strong> Establish pipelines optimized for component structure</li>
                    <li><strong>Security Framework:</strong> Configure security addressing vulnerabilities found</li>
                </ul>

                <h5 style="margin-top: 20px;"><i class="fas fa-cogs"></i> Phase 2: Framework Development (Nov-Dec 2025)</h5>
                <p>Develop the core integration framework using AI-identified patterns:</p>
                <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                    <li><strong>Core Integration Framework:</strong> Build framework with Camel K using AI-identified patterns</li>
                    <li><strong>Basic Connectors:</strong> Implement connectors for all external systems found in analysis</li>
                    <li><strong>Logging System:</strong> Create logging matching identified data flows</li>
                    <li><strong>Dynamic Router:</strong> Build router using extracted routing rules</li>
                    <li><strong>Validation App:</strong> Develop app to test all identified components</li>
                </ul>
            </div>
        </div>

        <div class="architecture-card" style="grid-column: 1 / -1; margin-top: 20px;">
            <h4><i class="fas fa-credit-card"></i> Payment Processing Development with AI Insights</h4>

            <h5 style="margin-top: 15px;"><i class="fas fa-credit-card"></i> Phase 4: Basic Payment Processing (Jan-Feb 2026)</h5>
            <p>Develop fundamental payment processing components using AI-extracted patterns:</p>
            <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                <li><strong>Basic Payment Kamelets:</strong> Implement for SEPA and ACH using AI-identified transformation rules</li>
                <li><strong>Payment Routing:</strong> Develop components based on extracted routing logic</li>
                <li><strong>Format Transformation:</strong> Create components using mapping patterns from analysis</li>
                <li><strong>SEPA Example:</strong> Build reference implementation using common patterns found</li>
                <li><strong>Validation Rules:</strong> Implement based on business logic identified in code</li>
            </ul>

            <div class="mermaid" style="margin-top: 20px; text-align: center;">
                graph LR
                    subgraph AI_Findings["AI Analysis Findings"]
                        direction TB
                        SEPA_Logic[SEPA Validation\nRules]
                        ACH_Logic[ACH Processing\nPatterns]
                        Transform_Maps[Transformation\nMappings]
                        Route_Conditions[Routing\nConditions]
                        Error_Patterns[Error Handling\nPatterns]
                    end

                    subgraph Payment_Processing["Payment Processing Components"]
                        direction TB
                        SEPA_Kamelet[SEPA Kamelet]
                        ACH_Kamelet[ACH Kamelet]
                        Router[Dynamic Router]
                        Transformer[Format Transformer]
                        Validator[Payment Validator]
                    end

                    SEPA_Logic --> SEPA_Kamelet
                    ACH_Logic --> ACH_Kamelet
                    Transform_Maps --> Transformer
                    Route_Conditions --> Router
                    Error_Patterns --> Validator

                    style AI_Findings fill:#673AB7,stroke:#5E35B1,color:white
                    style Payment_Processing fill:#4CAF50,stroke:#388E3C,color:white
            </div>

            <h5 style="margin-top: 20px;"><i class="fas fa-globe"></i> Phase 5: Complex Payment Development (Feb-Mar 2026)</h5>
            <p>Develop advanced payment processing components for complex scenarios:</p>
            <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                <li><strong>SWIFT Processing:</strong> Implement MT103 and MX using complex transformation rules identified</li>
                <li><strong>Real-Time Adapters:</strong> Develop for RTP, UPI, PIX based on specific patterns found</li>
                <li><strong>Legacy Connectors:</strong> Create for COBOL and EDI using legacy integration points</li>
                <li><strong>Complex Validation:</strong> Build rules including sanctions screening as identified</li>
                <li><strong>Error Handling:</strong> Implement advanced mechanisms for critical components flagged</li>
            </ul>
        </div>

        <div class="architecture-card" style="grid-column: 1 / -1; margin-top: 20px;">
            <h4><i class="fas fa-exchange-alt"></i> Gradual Migration with AI Guidance</h4>

            <h5 style="margin-top: 15px;"><i class="fas fa-exchange-alt"></i> Phase 6: Payment Type Migration (Mar-Aug 2026)</h5>
            <p>Migrate payment types in logical phases using dependency maps from AI analysis:</p>

            <div style="margin-top: 15px;">
                <h6>1. Domestic Payments (Mar-Apr 2026)</h6>
                <ul style="margin-top: 5px; padding-left: 20px; font-size: 0.9rem;">
                    <li>ACH processing migration using identified transformation patterns</li>
                    <li>BACS migration with validation rules extracted by AI</li>
                    <li>Faster Payments implementation based on real-time patterns found</li>
                    <li>Parallel operation with Tibco BW5 for validation</li>
                </ul>

                <h6 style="margin-top: 15px;">2. Regional Payments (Apr-May 2026)</h6>
                <ul style="margin-top: 5px; padding-left: 20px; font-size: 0.9rem;">
                    <li>SEPA Credit Transfer migration using ISO 20022 patterns identified</li>
                    <li>SEPA Direct Debit processing with extracted validation rules</li>
                    <li>SEPA Instant implementation based on real-time patterns</li>
                    <li>TARGET2 migration for high-value payments</li>
                </ul>

                <h6 style="margin-top: 15px;">3. International Payments (May-Jun 2026)</h6>
                <ul style="margin-top: 5px; padding-left: 20px; font-size: 0.9rem;">
                    <li>SWIFT MT103 processing with complex transformation rules</li>
                    <li>SWIFT MX implementation using ISO 20022 mappings</li>
                    <li>Cross-border routing optimization based on identified patterns</li>
                    <li>Currency conversion handling using extracted logic</li>
                </ul>

                <h6 style="margin-top: 15px;">4. Real-Time Payments (Jun-Jul 2026)</h6>
                <ul style="margin-top: 5px; padding-left: 20px; font-size: 0.9rem;">
                    <li>RTP implementation using identified real-time patterns</li>
                    <li>UPI connector based on specific integration points</li>
                    <li>PIX adapter using Brazilian payment patterns</li>
                    <li>24/7 availability requirements based on usage patterns</li>
                </ul>

                <h6 style="margin-top: 15px;">5. Legacy Payments (Jul-Aug 2026)</h6>
                <ul style="margin-top: 5px; padding-left: 20px; font-size: 0.9rem;">
                    <li>COBOL processing migration with careful validation</li>
                    <li>EDI 820 handling using identified transformation rules</li>
                    <li>MT940/942 bank statement processing</li>
                    <li>Mainframe integration based on identified patterns</li>
                </ul>
            </div>

            <div class="mermaid" style="margin-top: 20px; text-align: center;">
                graph LR
                    subgraph AI_Dependencies["AI Identified Dependencies"]
                        direction TB
                        Domestic[Domestic Payments]
                        Regional[Regional Payments]
                        International[International Payments]
                        RealTime[Real-Time Payments]
                        Legacy[Legacy Payments]
                    end

                    subgraph Migration_Sequence["Migration Sequence"]
                        direction TB
                        Phase1[Phase 1: Domestic]
                        Phase2[Phase 2: Regional]
                        Phase3[Phase 3: International]
                        Phase4[Phase 4: Real-Time]
                        Phase5[Phase 5: Legacy]
                    end

                    Domestic --> Phase1
                    Regional --> Phase2
                    International --> Phase3
                    RealTime --> Phase4
                    Legacy --> Phase5

                    Phase1 --> Phase2
                    Phase2 --> Phase3
                    Phase3 --> Phase4
                    Phase4 --> Phase5

                    style AI_Dependencies fill:#673AB7,stroke:#5E35B1,color:white
                    style Migration_Sequence fill:#4CAF50,stroke:#388E3C,color:white
            </div>
        </div>

        <div class="architecture-card" style="grid-column: 1 / -1; margin-top: 20px;">
            <h4><i class="fas fa-flag-checkered"></i> Finalization with AI Insights</h4>

            <h5 style="margin-top: 15px;"><i class="fas fa-trash"></i> Tibco BW5 Decommissioning</h5>
            <p>Complete the migration using insights from AI analysis:</p>
            <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                <li>Final validation of all components against AI-generated inventory</li>
                <li>Complete cutover using the optimal sequence determined by AI</li>
                <li>Decommission Tibco BW5 after validating all components are properly migrated</li>
                <li>Reclaim resources based on the utilization patterns identified</li>
            </ul>

            <h5 style="margin-top: 20px;"><i class="fas fa-tachometer-alt"></i> Final Performance Tuning</h5>
            <p>Optimize the platform based on performance patterns identified by AI:</p>
            <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                <li>Analyze production performance metrics focusing on critical paths</li>
                <li>Address bottlenecks in the components flagged as high-risk by AI</li>
                <li>Optimize resource allocation based on the usage patterns identified</li>
                <li>Tune database performance for the most frequently accessed data</li>
            </ul>

            <h5 style="margin-top: 20px;"><i class="fas fa-book"></i> Documentation and Training</h5>
            <p>Complete documentation incorporating AI insights:</p>
            <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                <li>Finalize architecture documentation with components identified by AI</li>
                <li>Complete operational procedures based on the interaction patterns found</li>
                <li>Develop training materials highlighting the key components and patterns</li>
                <li>Create knowledge base articles documenting the migration decisions</li>
            </ul>
        </div>

        <div class="architecture-card" style="grid-column: 1 / -1; margin-top: 20px;">
            <h4><i class="fas fa-check-circle"></i> Migration Success Factors with AI</h4>

            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-top: 15px;">
                <div>
                    <h5><i class="fas fa-cogs"></i> Technical Success Factors</h5>
                    <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                        <li><strong>Complete Component Coverage:</strong> All Tibco BW5 components identified and migrated</li>
                        <li><strong>Performance Improvement:</strong> New platform meets/exceeds performance targets identified by AI</li>
                        <li><strong>Dependency Resolution:</strong> All component dependencies properly handled</li>
                        <li><strong>Error Handling:</strong> Comprehensive error handling for all identified patterns</li>
                        <li><strong>Validation Coverage:</strong> All business rules from analysis properly implemented</li>
                    </ul>
                </div>

                <div>
                    <h5><i class="fas fa-users"></i> Organizational Success Factors</h5>
                    <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                        <li><strong>AI-Assisted Planning:</strong> Migration plan based on comprehensive AI analysis</li>
                        <li><strong>Risk Mitigation:</strong> Risks identified by AI properly addressed</li>
                        <li><strong>Team Training:</strong> Team trained on both new platform and AI analysis techniques</li>
                        <li><strong>Change Management:</strong> Smooth transition using insights from AI analysis</li>
                        <li><strong>Stakeholder Alignment:</strong> Business stakeholders aligned using AI-generated insights</li>
                    </ul>
                </div>

                <div>
                    <h5><i class="fas fa-chart-line"></i> Business Success Factors</h5>
                    <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                        <li><strong>Minimal Disruption:</strong> Business operations continue smoothly during migration</li>
                        <li><strong>Improved Time-to-Market:</strong> Faster deployment of new features using AI-identified patterns</li>
                        <li><strong>Cost Efficiency:</strong> Achieves expected cost savings from modern architecture</li>
                        <li><strong>Enhanced Compliance:</strong> Better compliance using the rules identified by AI</li>
                        <li><strong>Future-Proof:</strong> Architecture designed using the patterns discovered by AI</li>
                    </ul>
                </div>
            </div>

            <h5 style="margin-top: 20px;"><i class="fas fa-bullseye"></i> Key Performance Indicators</h5>
            <div style="margin-top: 15px; overflow-x: auto;">
                <table style="width: 100%; border-collapse: collapse; font-size: 0.9rem;">
                    <thead>
                        <tr style="background-color: var(--primary); color: white;">
                            <th style="padding: 10px; text-align: left;">Category</th>
                            <th style="padding: 10px; text-align: left;">KPI</th>
                            <th style="padding: 10px; text-align: left;">Target</th>
                            <th style="padding: 10px; text-align: left;">AI Contribution</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr style="border-bottom: 1px solid #eee;">
                            <td style="padding: 10px;" rowspan="4">Technical</td>
                            <td style="padding: 10px;">System Availability</td>
                            <td style="padding: 10px;">99.99%</td>
                            <td style="padding: 10px;">Identified critical components for high availability</td>
                        </tr>
                        <tr style="border-bottom: 1px solid #eee;">
                            <td style="padding: 10px;">Transaction Processing Time</td>
                            <td style="padding: 10px;">&lt;500ms for 95% of transactions</td>
                            <td style="padding: 10px;">Optimized critical paths based on usage patterns</td>
                        </tr>
                        <tr style="border-bottom: 1px solid #eee;">
                            <td style="padding: 10px;">Throughput</td>
                            <td style="padding: 10px;">10,000+ transactions/second at peak</td>
                            <td style="padding: 10px;">Scaled components based on dependency analysis</td>
                        </tr>
                        <tr style="border-bottom: 1px solid #eee;">
                            <td style="padding: 10px;">Error Rate</td>
                            <td style="padding: 10px;">&lt;0.01% failed transactions</td>
                            <td style="padding: 10px;">Enhanced error handling based on identified patterns</td>
                        </tr>
                        <tr style="border-bottom: 1px solid #eee; background-color: #f9f9f9;">
                            <td style="padding: 10px;" rowspan="3">Business</td>
                            <td style="padding: 10px;">Migration Completion</td>
                            <td style="padding: 10px;">100% of payment types migrated</td>
                            <td style="padding: 10px;">Comprehensive component inventory from AI</td>
                        </tr>
                        <tr style="border-bottom: 1px solid #eee; background-color: #f9f9f9;">
                            <td style="padding: 10px;">Cost Reduction</td>
                            <td style="padding: 10px;">30% reduction in infrastructure costs</td>
                            <td style="padding: 10px;">Optimized resource allocation based on usage patterns</td>
                        </tr>
                        <tr style="border-bottom: 1px solid #eee; background-color: #f9f9f9;">
                            <td style="padding: 10px;">Time-to-Market</td>
                            <td style="padding: 10px;">50% faster deployment of new features</td>
                            <td style="padding: 10px;">Reusable components identified by pattern analysis</td>
                        </tr>
                    </tbody>
                </table>
            </div>

            <h5 style="margin-top: 20px;"><i class="fas fa-exclamation-triangle"></i> Risk Mitigation with AI</h5>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); gap: 20px; margin-top: 15px;">
                <div>
                    <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                        <li><strong>Component Inventory:</strong> Complete inventory of all components from AI analysis</li>
                        <li><strong>Dependency Mapping:</strong> Comprehensive maps of component relationships</li>
                        <li><strong>Critical Path Identification:</strong> Highlighted performance-critical components</li>
                        <li><strong>Error Pattern Analysis:</strong> Identified common error scenarios</li>
                        <li><strong>Integration Points:</strong> Documented all external system connections</li>
                    </ul>
                </div>
                <div>
                    <ul style="margin-top: 10px; padding-left: 20px; font-size: 0.9rem;">
                        <li><strong>Validation Strategy:</strong> Component validation based on AI findings</li>
                        <li><strong>Fallback Planning:</strong> Revert plans for critical components</li>
                        <li><strong>Performance Baselines:</strong> Established from AI-identified patterns</li>
                        <li><strong>Monitoring Focus:</strong> Targeted at components flagged by AI</li>
                        <li><strong>Contingency Plans:</strong> For high-risk components identified</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Technologies -->
<section id="technologies" class="tab-content">
    <h2><i class="fas fa-microchip"></i> Technology Stack</h2>
    <div class="architecture-diagram">
        <div class="diagram-header">
            <h3>Complete Technology Stack</h3>
            <div class="diagram-actions">
                <button class="btn btn-primary" onclick="zoomIn('techDiagram')"><i class="fas fa-search-plus"></i> Zoom</button>
                <button class="btn btn-outline" onclick="resetZoom('techDiagram')"><i class="fas fa-sync"></i> Reset</button>
            </div>
        </div>
        <div class="mermaid" id="techDiagram">
            %%{init: {'theme': 'default'}}%%
            graph LR
                %% Custom CSS for node styling
                classDef quarkus fill:#1E88E5,stroke:#1565C0,color:#FFFFFF,stroke-width:2px;
                classDef camel fill:#FF9800,stroke:#E65100,color:#FFFFFF,stroke-width:2px;
                classDef kafka fill:#4CAF50,stroke:#2E7D32,color:#FFFFFF,stroke-width:2px;
                classDef postgres fill:#9C27B0,stroke:#7B1FA2,color:#FFFFFF,stroke-width:2px;
                classDef kubernetes fill:#607D8B,stroke:#37474F,color:#FFFFFF,stroke-width:2px;
                classDef external fill:#F44336,stroke:#C62828,color:#FFFFFF,stroke-width:2px;
                classDef monitoring fill:#795548,stroke:#3E2723,color:#FFFFFF,stroke-width:2px;
                classDef cicd fill:#009688,stroke:#00796B,color:#FFFFFF,stroke-width:2px;

                subgraph Core Platform
                    Q[Quarkus]
                    C[Camel K]
                    K[Kafka]
                    P[PostgreSQL]
                end
                class Q quarkus;
                class C camel;
                class K kafka;
                class P postgres;

                subgraph Cloud Native
                    K8S[Kubernetes]
                    I[Istio]
                    G[Grafana]
                    J[Jaeger]
                end
                class K8S,I kubernetes;
                class G,J monitoring;

                subgraph Dev & Ops
                    AR[ArgoCD]
                    T[Tekton]
                    V[Vault]
                    H[Helm]
                    JENK[Jenkins]
                    GIT[Git]
                end
                class AR,T,V,H,JENK,GIT cicd;

                subgraph Databases
                    PG[PostgreSQL]
                    RED[Redis]
                end
                class PG postgres;
                class RED external;

                Q --> K8S
                C --> K8S
                K --> K8S
                P --> K8S
                I --> K8S
                G --> K8S
                J --> K8S
                AR --> K8S
                T --> K8S
                V --> K8S
                H --> K8S
                JENK --> K8S
                GIT --> JENK
        </div>
    </div>

    <div class="architecture-grid">
        <div class="architecture-card">
            <h4><i class="fas fa-bolt"></i> Quarkus</h4>
            <p>Cloud-native Java framework for business services, with ultra-fast startup and optimized memory usage.</p>
            <div class="tech-pill pill-quarkus">Quarkus</div>
            <div class="tech-pill pill-kubernetes">Kubernetes</div>
        </div>
        <div class="architecture-card">
            <h4><i class="fas fa-code"></i> Camel K</h4>
            <p>Cloud-native integration platform for Kubernetes, enabling rapid deployment of integration routes.</p>
            <div class="tech-pill pill-camel">Camel K</div>
            <div class="tech-pill pill-kubernetes">Kubernetes</div>
        </div>
        <div class="architecture-card">
            <h4><i class="fas fa-stream"></i> Apache Kafka</h4>
            <p>Event streaming platform as internal bus for communication between microservices and integration routes.</p>
            <div class="tech-pill pill-kafka">Kafka</div>
        </div>
        <div class="architecture-card">
            <h4><i class="fas fa-database"></i> PostgreSQL</h4>
            <p>Relational database for structured logging of transactions and message traceability.</p>
            <div class="tech-pill pill-postgres">PostgreSQL</div>
        </div>
        <div class="architecture-card">
            <h4><i class="fas fa-server"></i> Kubernetes</h4>
            <p>Container orchestration platform for deployment and management of services.</p>
            <div class="tech-pill pill-kubernetes">Kubernetes</div>
        </div>
        <div class="architecture-card">
            <h4><i class="fas fa-tachometer-alt"></i> Monitoring</h4>
            <p>Complete monitoring solution with Prometheus, Grafana, and Jaeger for metrics and distributed tracing.</p>
            <div class="tech-pill pill-kubernetes">Prometheus</div>
            <div class="tech-pill pill-kubernetes">Grafana</div>
            <div class="tech-pill pill-kubernetes">Jaeger</div>
        </div>
        <div class="architecture-card">
            <h4><i class="fas fa-code-branch"></i> CI/CD</h4>
            <p>Automated build, test, and deployment pipeline using Jenkins, ArgoCD, and Git.</p>
            <div class="tech-pill" style="background-color: #009688; color: white;">Jenkins</div>
            <div class="tech-pill" style="background-color: #009688; color: white;">ArgoCD</div>
            <div class="tech-pill" style="background-color: #009688; color: white;">Git</div>
        </div>
        <div class="architecture-card">
            <h4><i class="fas fa-lock"></i> Security</h4>
            <p>Vault for secrets management and Istio for service mesh security.</p>
            <div class="tech-pill" style="background-color: #607D8B; color: white;">Vault</div>
            <div class="tech-pill" style="background-color: #607D8B; color: white;">Istio</div>
        </div>
    </div>

    <div class="component-details">
        <h3><i class="fas fa-cogs"></i> Technology Stack Details</h3>
        <div class="architecture-card" style="grid-column: 1 / -1;">
            <h4><i class="fas fa-layer-group"></i> Core Platform Components</h4>
            <p>The core platform is built on a modern, cloud-native stack that provides the foundation for all banking services and integrations:</p>
            <ul style="margin-top: 10px; padding-left: 20px;">
                <li><strong>Quarkus:</strong> Provides the runtime for business services with fast startup and low memory usage, perfect for Kubernetes environments.</li>
                <li><strong>Camel K:</strong> Handles all integration requirements with its lightweight, Kubernetes-native approach and extensive library of connectors.</li>
                <li><strong>Kafka:</strong> Serves as the event backbone, enabling real-time communication between services and systems.</li>
                <li><strong>PostgreSQL:</strong> Stores all transactional data and provides structured logging for audit and compliance.</li>
            </ul>
        </div>

        <div class="architecture-card" style="grid-column: 1 / -1; margin-top: 20px;">
            <h4><i class="fas fa-cloud"></i> Cloud-Native Infrastructure</h4>
            <p>The platform leverages Kubernetes and related cloud-native technologies for deployment, scaling, and management:</p>
            <ul style="margin-top: 10px; padding-left: 20px;">
                <li><strong>Kubernetes:</strong> Orchestrates containerized applications, providing auto-scaling, self-healing, and declarative management.</li>
                <li><strong>Istio:</strong> Service mesh for secure service-to-service communication, observability, and traffic management.</li>
                <li><strong>Helm:</strong> Package manager for Kubernetes applications, simplifying deployment and versioning.</li>
                <li><strong>ArgoCD:</strong> GitOps continuous delivery tool for Kubernetes, ensuring declarative and auditable deployments.</li>
            </ul>
        </div>

        <div class="architecture-card" style="grid-column: 1 / -1; margin-top: 20px;">
            <h4><i class="fas fa-tools"></i> DevOps and Security</h4>
            <p>The DevOps toolchain and security infrastructure ensure rapid, reliable, and secure delivery of banking services:</p>
            <ul style="margin-top: 10px; padding-left: 20px;">
                <li><strong>Jenkins:</strong> CI server for building, testing, and packaging applications.</li>
                <li><strong>Tekton:</strong> Kubernetes-native CI/CD pipelines for cloud-native applications.</li>
                <li><strong>Vault:</strong> Secrets management for secure storage and access to sensitive data.</li>
                <li><strong>Git:</strong> Version control system for source code and infrastructure-as-code.</li>
                <li><strong>Prometheus/Grafana:</strong> Monitoring and alerting for platform and application metrics.</li>
                <li><strong>Jaeger:</strong> Distributed tracing for end-to-end transaction visibility.</li>
            </ul>
        </div>

        <div class="architecture-card" style="grid-column: 1 / -1; margin-top: 20px;">
            <h4><i class="fas fa-balance-scale"></i> Technology Selection Rationale</h4>
            <p>The technology stack was selected based on the following criteria:</p>
            <ul style="margin-top: 10px; padding-left: 20px;">
                <li><strong>Cloud-Native:</strong> All components are designed for Kubernetes and cloud environments.</li>
                <li><strong>Performance:</strong> Optimized for low latency and high throughput required by banking applications.</li>
                <li><strong>Scalability:</strong> Horizontal scaling capabilities to handle peak loads.</li>
                <li><strong>Resilience:</strong> Self-healing and fault-tolerant architecture.</li>
                <li><strong>Security:</strong> Built-in security features and compliance with banking regulations.</li>
                <li><strong>Developer Experience:</strong> Modern tooling and workflows to improve productivity.</li>
                <li><strong>Ecosystem:</strong> Strong community support and integration capabilities.</li>
                <li><strong>Cost:</strong> Open-source components to minimize licensing costs.</li>
            </ul>
            <p style="margin-top: 15px;"><strong>Alternatives Considered:</strong></p>
            <ul style="margin-top: 10px; padding-left: 20px;">
                <li><strong>Spring Boot:</strong> Considered but rejected due to higher resource usage compared to Quarkus.</li>
                <li><strong>MuleSoft:</strong> Evaluated but deemed too heavy and expensive for our cloud-native approach.</li>
                <li><strong>RabbitMQ:</strong> Considered as an alternative to Kafka but lacked the same scalability for event streaming.</li>
                <li><strong>GitLab CI:</strong> Evaluated but Jenkins was already in use and met our requirements.</li>
            </ul>
        </div>
    </div>
</section>

<!-- Data Flow -->
<section id="flow" class="tab-content">
    <h2><i class="fas fa-stream"></i> Data Flow</h2>
    <div class="architecture-diagram">
        <div class="diagram-header">
            <h3>Customer Credit Transfer (PAIN.001) Flow</h3>
            <div class="diagram-actions">
                <button class="btn btn-primary" onclick="zoomIn('flowDiagram')"><i class="fas fa-search-plus"></i> Zoom</button>
                <button class="btn btn-outline" onclick="resetZoom('flowDiagram')"><i class="fas fa-sync"></i> Reset</button>
            </div>
        </div>
        <div class="mermaid" id="flowDiagram">
            %%{init: {'theme': 'default', 'sequence': {'useMaxWidth': true}}}%%
            sequenceDiagram
                participant Client as Customer (Mobile/Web)
                participant Gateway as API Gateway
                participant Kafka as Kafka Topic
                participant PAIN_Kamelet as PAIN.001 Kamelet
                participant Validator as Validator Kamelet
                participant Transformer as Data Transformer Kamelet
                participant Logger as Structured Logger Kamelet
                participant Router as Dynamic Router Kamelet
                participant Bank as Banking System
                participant DB as PostgreSQL
                participant Fraud as Fraud Detection Service

                Client->>Gateway: Submit PAIN.001 Credit Transfer Request
                Gateway->>Kafka: Publish to "pain-001-input" Topic
                Kafka->>PAIN_Kamelet: Consume PAIN.001 Message
                PAIN_Kamelet->>PAIN_Kamelet: Parse PAIN.001 XML
                PAIN_Kamelet->>Validator: Forward for Validation
                Validator->>Fraud: Check for Fraud
                alt Fraud Detected
                    Fraud->>Validator: Fraud Alert
                    Validator->>Logger: Log Fraud Detection
                    Logger->>DB: Persist Fraud Log Entry
                    Validator->>Kafka: Publish to "pain-001-rejected" Topic
                    Kafka->>Gateway: Notify Client via API
                    Gateway->>Client: Credit Transfer Rejected (Fraud)
                else No Fraud
                    Validator->>Transformer: Forward Validated Message
                    Transformer->>Transformer: Transform to Internal Format
                    Transformer->>Logger: Log Transformation
                    Logger->>DB: Persist Log Entry
                    Transformer->>Router: Forward Transformed Message
                    Router->>Router: Route to Banking System
                    Router->>Bank: Submit Credit Transfer
                    Bank-->>Router: Confirmation/Rejection
                    alt Transfer Successful
                        Router->>Logger: Log Bank Response
                        Logger->>DB: Persist Log Entry
                        Router->>Kafka: Publish to "pain-001-output" Topic
                        Kafka->>Gateway: Notify Client via API
                        Gateway->>Client: Credit Transfer Confirmation
                    else Transfer Failed
                        Router->>Logger: Log Failure
                        Logger->>DB: Persist Error Log Entry
                        Router->>Kafka: Publish to "pain-001-failed" Topic
                        Kafka->>Gateway: Notify Client via API
                        Gateway->>Client: Credit Transfer Failed (Reason)
                    end
                end
        </div>
    </div>

    <div class="architecture-grid">
        <div class="architecture-card">
            <h4><i class="fas fa-sign-in-alt"></i> Reception</h4>
            <p>The customer submits a PAIN.001 Credit Transfer request via the API Gateway. The request is published to the <code>pain-001-input</code> Kafka topic.</p>
            <div class="tech-pill pill-kafka">Kafka</div>
            <div class="tech-pill pill-camel">PAIN.001 Kamelet</div>
        </div>
        <div class="architecture-card">
            <h4><i class="fas fa-user-shield"></i> Fraud Detection</h4>
            <p>The Fraud Detection Service analyzes the transaction for suspicious patterns before proceeding with validation.</p>
            <div class="tech-pill pill-quarkus">Quarkus</div>
            <div class="tech-pill pill-postgres">PostgreSQL</div>
        </div>
        <div class="architecture-card">
            <h4><i class="fas fa-cogs"></i> Validation</h4>
            <p>The PAIN.001 message is validated for schema compliance and business rules (e.g., account validity, amount limits).</p>
            <div class="tech-pill pill-camel">Validator Kamelet</div>
        </div>
        <div class="architecture-card">
            <h4><i class="fas fa-exchange-alt"></i> Transformation</h4>
            <p>Validated PAIN.001 messages are transformed into the internal format required by the banking system.</p>
            <div class="tech-pill pill-camel">Data Transformer Kamelet</div>
        </div>
        <div class="architecture-card">
            <h4><i class="fas fa-route"></i> Routing</h4>
            <p>The transformed message is routed to the banking system for processing. Responses are logged and forwarded to the client.</p>
            <div class="tech-pill pill-camel">Dynamic Router Kamelet</div>
        </div>
        <div class="architecture-card">
            <h4><i class="fas fa-database"></i> Logging & Persistence</h4>
            <p>Every step (reception, validation, transformation, routing, and banking response) is logged in PostgreSQL for traceability.</p>
            <div class="tech-pill pill-postgres">PostgreSQL</div>
            <div class="tech-pill pill-camel">Structured Logger Kamelet</div>
        </div>
        <div class="architecture-card">
            <h4><i class="fas fa-university"></i> Banking Integration</h4>
            <p>The banking system processes the credit transfer and returns a confirmation or rejection, which is logged and forwarded to the client.</p>
            <div class="tech-pill pill-camel">Dynamic Router Kamelet</div>
            <div class="tech-pill" style="background-color: #F44336; color: white;">Banking System</div>
        </div>
    </div>

    <div class="component-details">
        <h3><i class="fas fa-sitemap"></i> Data Flow Architecture</h3>
        <div class="architecture-card" style="grid-column: 1 / -1;">
            <h4><i class="fas fa-project-diagram"></i> End-to-End Flow</h4>
            <p>The data flow architecture ensures that credit transfer requests are processed securely, reliably, and efficiently through the following stages:</p>
            <ol style="margin-top: 10px; padding-left: 20px;">
                <li><strong>Request Submission:</strong> Customer submits a PAIN.001 credit transfer request via mobile or web interface.</li>
                <li><strong>API Gateway:</strong> The request is received by the API Gateway, which performs initial validation and routing.</li>
                <li><strong>Kafka Ingestion:</strong> The request is published to the "pain-001-input" Kafka topic for asynchronous processing.</li>
                <li><strong>PAIN.001 Processing:</strong> The PAIN.001 Kamelet consumes the message, parses the XML, and forwards it for validation.</li>
                <li><strong>Fraud Check:</strong> The Fraud Detection Service analyzes the transaction for suspicious activity.</li>
                <li><strong>Validation:</strong> The Validator Kamelet checks the message against schema and business rules.</li>
                <li><strong>Transformation:</strong> The Data Transformer Kamelet converts the message to the internal format.</li>
                <li><strong>Routing:</strong> The Dynamic Router Kamelet sends the message to the appropriate banking system.</li>
                <li><strong>Bank Processing:</strong> The banking system processes the credit transfer and returns a response.</li>
                <li><strong>Response Handling:</strong> The response is logged and forwarded back to the customer via the API Gateway.</li>
            </ol>
        </div>

        <div class="architecture-card" style="grid-column: 1 / -1; margin-top: 20px;">
            <h4><i class="fas fa-shield-alt"></i> Security and Compliance</h4>
            <p>The data flow architecture incorporates multiple security and compliance measures:</p>
            <ul style="margin-top: 10px; padding-left: 20px;">
                <li><strong>Authentication:</strong> All API requests are authenticated using OAuth2 and JWT.</li>
                <li><strong>Authorization:</strong> Role-based access control ensures users can only perform allowed actions.</li>
                <li><strong>Encryption:</strong> All data in transit is encrypted using TLS 1.2 or higher.</li>
                <li><strong>Audit Logging:</strong> All actions are logged with timestamps and user information for compliance.</li>
                <li><strong>Fraud Detection:</strong> Real-time fraud detection analyzes transactions for suspicious patterns.</li>
                <li><strong>Data Validation:</strong> Strict validation of all input data against schemas and business rules.</li>
                <li><strong>Error Handling:</strong> Comprehensive error handling and retry mechanisms for failed operations.</li>
                <li><strong>Monitoring:</strong> End-to-end monitoring of all transactions for operational visibility.</li>
            </ul>
        </div>

        <div class="architecture-card" style="grid-column: 1 / -1; margin-top: 20px;">
            <h4><i class="fas fa-chart-line"></i> Performance Considerations</h4>
            <p>The architecture is designed for high performance and scalability:</p>
            <ul style="margin-top: 10px; padding-left: 20px;">
                <li><strong>Asynchronous Processing:</strong> Kafka enables non-blocking, event-driven processing of credit transfer requests.</li>
                <li><strong>Horizontal Scaling:</strong> All components can be scaled horizontally to handle increased load.</li>
                <li><strong>Caching:</strong> Frequently accessed data is cached to reduce database load.</li>
                <li><strong>Connection Pooling:</strong> Database and external system connections are pooled for efficient reuse.</li>
                <li><strong>Batching:</strong> Where appropriate, messages are processed in batches to improve throughput.</li>
                <li><strong>Resource Optimization:</strong> Quarkus and Camel K are optimized for low memory usage and fast startup.</li>
                <li><strong>Load Testing:</strong> The architecture is regularly load-tested to identify and address bottlenecks.</li>
            </ul>
        </div>

        <div class="architecture-card" style="grid-column: 1 / -1; margin-top: 20px;">
            <h4><i class="fas fa-exclamation-triangle"></i> Error Handling and Recovery</h4>
            <p>Comprehensive error handling ensures reliability:</p>
            <ul style="margin-top: 10px; padding-left: 20px;">
                <li><strong>Validation Errors:</strong> Invalid requests are rejected immediately with detailed error messages.</li>
                <li><strong>Retry Mechanism:</strong> Temporary failures trigger automatic retries with exponential backoff.</li>
                <li><strong>Dead Letter Queue:</strong> Persistently failing messages are moved to a DLQ for manual inspection.</li>
                <li><strong>Circuit Breakers:</strong> Prevent cascading failures by temporarily stopping calls to failing services.</li>
                <li><strong>Fallback Processing:</strong> Alternative processing paths are available for critical operations.</li>
                <li><strong>Alerting:</strong> Operations team is alerted to critical failures via monitoring systems.</li>
                <li><strong>Recovery Procedures:</strong> Documented procedures for manual recovery from various failure scenarios.</li>
            </ul>
        </div>

        <div class="architecture-card" style="grid-column: 1 / -1; margin-top: 20px;">
            <h4><i class="fas fa-search"></i> Monitoring and Observability</h4>
            <p>End-to-end monitoring provides visibility into the data flow:</p>
            <ul style="margin-top: 10px; padding-left: 20px;">
                <li><strong>Metrics:</strong> Prometheus collects metrics on message volumes, processing times, and error rates.</li>
                <li><strong>Logging:</strong> Structured logs with correlation IDs enable tracing of individual transactions.</li>
                <li><strong>Tracing:</strong> Jaeger provides distributed tracing for performance analysis.</li>
                <li><strong>Dashboards:</strong> Grafana dashboards visualize key performance indicators.</li>
                <li><strong>Alerts:</strong> Anomalies trigger alerts to the operations team.</li>
                <li><strong>Audit Trails:</strong> All transactions are logged for compliance and forensic analysis.</li>
                <li><strong>SLA Monitoring:</strong> Service level agreements are monitored and reported on.</li>
            </ul>
        </div>
    </div>
</section>

		<footer>
        <div class="container">
            <p>Cloud-Native Integration Framework - Architecture Visualization</p>
            <p>© 2025 - Tibco BW5 to Quarkus, Camel K, and Kafka Migration</p>
        </div>
    </footer>
    <script>
        // Initialisation de Mermaid avec configuration optimisée
        mermaid.initialize({
            startOnLoad: false,
            theme: 'default',
            securityLevel: 'loose',
            fontFamily: 'Segoe UI, Tahoma, Geneva, Verdana, sans-serif',
            flowchart: { useMaxWidth: true, htmlLabels: true, curve: 'basis' },
            gantt: {
                barHeight: 30,
                fontSize: 14,
                useMaxWidth: true
            },
            sequence: { useMaxWidth: true }
        });

        // Gestion des onglets avec rafraîchissement des diagrammes
        document.querySelectorAll('.tab-link').forEach(link => {
            link.addEventListener('click', function(e) {
                e.preventDefault();
                const tabId = this.getAttribute('data-tab');
                document.querySelectorAll('.tab-content').forEach(tab => {
                    tab.classList.remove('active');
                });
                document.getElementById(tabId).classList.add('active');
                // Rafraîchir TOUS les diagrammes de l'onglet actif
                setTimeout(() => {
                    mermaid.init(undefined, `#${tabId} .mermaid`);
                }, 10);
            });
        });

        // Fonctions de zoom
        function zoomIn(diagramId) {
            const diagram = document.getElementById(diagramId);
            const currentScale = diagram.style.transform ? parseFloat(diagram.style.transform.match(/scale\(([^)]+)\)/)[1]) : 1;
            diagram.style.transform = `scale(${currentScale + 0.2})`;
            diagram.parentElement.style.overflow = 'auto';
        }

        function resetZoom(diagramId) {
            const diagram = document.getElementById(diagramId);
            diagram.style.transform = 'scale(1)';
        }

        // Initialisation au chargement de la page
        document.addEventListener('DOMContentLoaded', function() {
            // Initialiser les diagrammes de l'onglet actif par défaut
            mermaid.init(undefined, '#global .mermaid');
        });
    </script>
</body>
</html>
